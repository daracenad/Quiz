Index: app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/LoginResponse.kt
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/LoginResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/LoginResponse.kt
deleted file mode 100644
--- a/app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/LoginResponse.kt	(revision fb0d643ef364836986f794847ac445143be2658f)
+++ /dev/null	(revision fb0d643ef364836986f794847ac445143be2658f)
@@ -1,7 +0,0 @@
-package cl.daracenad.elearning.exercises.io.model.response
-
-data class LoginResponse (
-    val status:Int,
-    val message:String,
-    val access_token:String
-)
Index: app/src/main/java/cl/daracenad/elearning/exercises/io/ApiService.kt
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/io/ApiService.kt b/app/src/main/java/cl/daracenad/elearning/exercises/io/ApiService.kt
deleted file mode 100644
--- a/app/src/main/java/cl/daracenad/elearning/exercises/io/ApiService.kt	(revision fb0d643ef364836986f794847ac445143be2658f)
+++ /dev/null	(revision fb0d643ef364836986f794847ac445143be2658f)
@@ -1,41 +0,0 @@
-package cl.daracenad.elearning.exercises.io
-
-import cl.daracenad.elearning.exercises.io.model.response.LoginResponse
-import com.google.gson.GsonBuilder
-import okhttp3.OkHttpClient
-import retrofit2.Call
-import retrofit2.Retrofit
-import retrofit2.converter.gson.GsonConverterFactory
-import retrofit2.http.POST
-import retrofit2.http.Query
-
-interface ApiService {
-
-    @POST(value="login")
-    fun postLogin(
-        @Query(value="email") email:String,
-        @Query(value="password") password:String
-    ): Call<LoginResponse>
-
-    companion object Factory{
-        private const val BASE_URL = "https://buscameaqui.cl/api/"
-        fun create():ApiService{
-            val gson = GsonBuilder().setLenient().create()
-            val retrofit = Retrofit.Builder()
-                .baseUrl(BASE_URL)
-                .addConverterFactory(GsonConverterFactory.create(gson))
-                .client(getClient())
-                .build()
-
-            return retrofit.create(ApiService::class.java)
-        }
-
-        private fun getClient(): OkHttpClient {
-            val client = OkHttpClient.Builder()
-                .addInterceptor(HeaderInterceptor())
-                .build()
-
-            return client
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/io/ui/LoginActivity.kt
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/io/ui/LoginActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/io/ui/LoginActivity.kt
deleted file mode 100644
--- a/app/src/main/java/cl/daracenad/elearning/exercises/io/ui/LoginActivity.kt	(revision fb0d643ef364836986f794847ac445143be2658f)
+++ /dev/null	(revision fb0d643ef364836986f794847ac445143be2658f)
@@ -1,75 +0,0 @@
-package cl.daracenad.elearning.exercises.io.ui
-
-import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import android.widget.Button
-import android.widget.TextView
-import android.widget.Toast
-import cl.daracenad.elearning.exercises.R
-import cl.daracenad.elearning.exercises.io.ApiService
-import cl.daracenad.elearning.exercises.io.model.response.LoginResponse
-import cl.daracenad.elearning.exercises.io.model.response.RegisterActivity
-import retrofit2.Call
-import retrofit2.Callback
-import retrofit2.Response
-
-class LoginActivity : AppCompatActivity() {
-    private val apiService: ApiService by lazy{
-        ApiService.create()
-    }
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-
-        setContentView(R.layout.activity_login)
-        val tvGoRegister = findViewById<TextView>(R.id.tv_go_register)
-        val btnGoLogin = findViewById<Button>(R.id.btnInitLogin)
-        val etMail = findViewById<TextView>(R.id.etEMail)
-        val etPassword = findViewById<TextView>(R.id.etPassword)
-        tvGoRegister.setOnClickListener{
-            val intent  = Intent(this, RegisterActivity::class.java)
-            startActivity(intent)
-        }
-        btnGoLogin.setOnClickListener{
-            performLogin(etMail.text.toString(), etPassword.text.toString())
-            //performLogin("daracenad.pescador.artesanal@gmail.com", "poqwpoqw")
-            //val intent  = Intent(this, MainActivity::class.java)
-            //startActivity(intent)
-        }
-    }
-
-    private fun createSession(key:String){
-
-    }
-    private fun performLogin(email:String, password:String){
-        val call = apiService.postLogin(email, password)
-        call.enqueue(object: Callback<LoginResponse> {
-            override fun onResponse(call: Call<LoginResponse>, response: Response<LoginResponse>) {
-                //Log.e("rest-api : 0","${response}")
-                if(response.isSuccessful){
-                    val loginResponse = response.body()
-                    //Log.e("rest-api : 0","${loginResponse}")
-                    if(loginResponse == null){
-                        Toast.makeText(applicationContext,"Se produjo un error, en la entraga de información", Toast.LENGTH_LONG).show()
-                        return
-                    }
-                    if(loginResponse.status == 1){
-                        Toast.makeText(applicationContext,"Exito un error ${loginResponse.access_token}", Toast.LENGTH_LONG).show()
-                        return
-                    }else{
-                        Toast.makeText(applicationContext,"Credencial son incorrectas", Toast.LENGTH_LONG).show()
-                        //Log.e("rest-api - 4","${loginResponse}")
-                    }
-                }else{
-                    Toast.makeText(applicationContext,"Se produjo un error de respuesta", Toast.LENGTH_LONG).show()
-                }
-            }
-            override fun onFailure(call: Call<LoginResponse>, t: Throwable) {
-
-                Toast.makeText(applicationContext,"Se produjo de conexión", Toast.LENGTH_LONG).show()
-                //Log.e("rest-api","${t.message}")
-            }
-
-        })
-    }
-}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/RegisterActivity.kt
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/RegisterActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/RegisterActivity.kt
deleted file mode 100644
--- a/app/src/main/java/cl/daracenad/elearning/exercises/io/model/response/RegisterActivity.kt	(revision fb0d643ef364836986f794847ac445143be2658f)
+++ /dev/null	(revision fb0d643ef364836986f794847ac445143be2658f)
@@ -1,23 +0,0 @@
-package cl.daracenad.elearning.exercises.io.model.response
-
-import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import android.widget.TextView
-import cl.daracenad.elearning.exercises.R
-import cl.daracenad.elearning.exercises.io.ui.LoginActivity
-
-class RegisterActivity : AppCompatActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_register)
-
-        val tvGoLogin = findViewById<TextView>(R.id.tv_go_to_login)
-        tvGoLogin.setOnClickListener{
-            val intent  = Intent(this, LoginActivity::class.java)
-            startActivity(intent)
-
-        }
-
-    }
-}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/School.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/School.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/School.kt
new file mode 100644
--- /dev/null	(date 1694315364000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/School.kt	(date 1694315364000)
@@ -0,0 +1,17 @@
+package cl.daracenad.elearning.exercises.domain.model.school
+
+import cl.daracenad.elearning.exercises.data.database.entities.SchoolEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.SchoolSerialize
+
+data class School(
+    val id:String,
+    val name:String,
+    val description:String,
+    var student: Student?,
+    var courses: List<Course>,
+    var token:String?
+)
+
+fun SchoolEntity.toDomain() = School(id =id, name =name, description = description, student = null,token = "",courses = emptyList())
+fun School.toEntity() = SchoolEntity(id=id,name=name, description=description, status = "AC")
+fun SchoolSerialize.toDomain() = School(id =id, name =name, description = description, student=null,token=token, courses = emptyList())
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/IAPIClient.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/IAPIClient.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/IAPIClient.kt
new file mode 100644
--- /dev/null	(date 1694512967000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/IAPIClient.kt	(date 1694512967000)
@@ -0,0 +1,71 @@
+package cl.daracenad.elearning.exercises.data.network
+
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.AnswerResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.CourseResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.EnrolledCoursePost
+import cl.daracenad.elearning.exercises.data.network.model.sys.DonwloadTableResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.QuestionResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TestTemplateResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TopicResponse
+import retrofit2.Response
+import retrofit2.http.Body
+import retrofit2.http.GET
+import retrofit2.http.Header
+import retrofit2.http.POST
+import retrofit2.http.PUT
+import retrofit2.http.Query
+
+interface IAPIClient {
+
+
+
+    @GET(value="download-table")
+    suspend fun downloadTable(
+        @Header("Authorization") token: String
+    ): Response<DonwloadTableResponse>
+
+    @GET(value="download-answers")
+    suspend fun downloadAnswers(
+        @Header("Authorization") token: String,
+        @Query(value="schoolId")  schoolId:String,
+        @Query(value="version")  version:Int
+    ): Response<AnswerResponse>
+
+    suspend @GET(value="download-courses")
+    fun downloadCourses(
+        @Header("Authorization") token: String,
+        @Query(value="schoolId")  schoolId:String,
+        @Query(value="version")  version:Int
+    ): Response<CourseResponse>
+
+    @GET(value="download-test-templates")
+    suspend fun downloadTestTemplates(
+        @Header("Authorization") token: String,
+        @Query(value="schoolId")  schoolId:String,
+        @Query(value="version")  version:Int
+    ): Response<TestTemplateResponse>
+
+    suspend @GET(value="download-topics")
+    fun downloadTopics(
+        @Header("Authorization") token: String,
+        @Query(value="schoolId")  schoolId:String,
+        @Query(value="version")  version:Int
+    ): Response<TopicResponse>
+
+    @GET(value="download-questions")
+    suspend fun downloadQuestions(
+        @Header("Authorization") token: String,
+        @Query(value="schoolId")  schoolId:String,
+        @Query(value="version")  version:Int
+    ): Response<QuestionResponse>
+
+
+
+    @PUT(value="user-profile")
+    suspend fun userProfileUpdate(
+        @Header("Authorization") token: String,
+        @Query(value="name")  name:String
+    ): Response<ReturnResponse>
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TopicEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TopicEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TopicEntity.kt
new file mode 100644
--- /dev/null	(date 1693184560000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TopicEntity.kt	(date 1693184560000)
@@ -0,0 +1,31 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.PrimaryKey
+import com.google.gson.annotations.SerializedName
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "topics",
+    foreignKeys = [ForeignKey(
+        entity = CourseEntity::class,
+        parentColumns = arrayOf("id"),
+        childColumns = arrayOf("courseId")
+    )
+    ]
+)
+data class TopicEntity (
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull val id:String,
+    @ColumnInfo(name = "schoolId") val schoolId:String,
+    @ColumnInfo(name = "courseId") @NotNull val courseId:String,
+    @ColumnInfo(name = "name") @NotNull val name:String,
+    @ColumnInfo(name = "description") @NotNull val description:String,
+    @ColumnInfo(name = "status") @NotNull val status:String,
+
+){
+    companion object {
+        const val TABLE_NAME = "topics"
+    }
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IDownloadTableDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IDownloadTableDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IDownloadTableDAO.kt
new file mode 100644
--- /dev/null	(date 1692931851000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IDownloadTableDAO.kt	(date 1692931851000)
@@ -0,0 +1,30 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.DownloadTableEntity
+
+@Dao
+interface IDownloadTableDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: DownloadTableEntity):Long
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<DownloadTableEntity>)
+
+    @Update
+    suspend fun update(vararg entity: DownloadTableEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: DownloadTableEntity)
+
+    @Query("SELECT * FROM " + DownloadTableEntity.TABLE_NAME)
+    suspend fun all(): DownloadTableEntity
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Student.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Student.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Student.kt
new file mode 100644
--- /dev/null	(date 1694353375000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Student.kt	(date 1694353375000)
@@ -0,0 +1,19 @@
+package cl.daracenad.elearning.exercises.domain.model.school
+import cl.daracenad.elearning.exercises.data.database.entities.StudentEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.StudentSerialize
+
+data class Student(
+    val id:String,
+    val schoolId:String,
+    val name:String,
+    val email:String,
+    var matriculates:List<Matriculate>?
+)
+
+fun StudentEntity.toDomain() = Student(id =id, name =name, email = email, schoolId = schoolId,
+    matriculates = null
+)
+fun Student.toEntity() = StudentEntity(id=id,name=name, email = email, schoolId = schoolId)
+fun StudentSerialize.toDomain(schoolId:String) = Student(id =id, name =name, email = email, schoolId = schoolId,
+    matriculates = null
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/SchoolEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/SchoolEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/SchoolEntity.kt
new file mode 100644
--- /dev/null	(date 1694315316000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/SchoolEntity.kt	(date 1694315316000)
@@ -0,0 +1,18 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+import org.jetbrains.annotations.NotNull
+
+@Entity(tableName = "schools")
+data class SchoolEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id:String,
+    @ColumnInfo(name = "name") @NotNull var name:String,
+    @ColumnInfo(name = "description") var description:String,
+    @ColumnInfo(name = "status") @NotNull var status:String
+){
+    companion object {
+        const val TABLE_NAME = "schools"
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/card_topic.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/card_topic.xml b/app/src/main/res/layout/card_topic.xml
new file mode 100644
--- /dev/null	(date 1695303363000)
+++ b/app/src/main/res/layout/card_topic.xml	(date 1695303363000)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    app:cardCornerRadius="10dp"
+    app:cardElevation="8dp"
+    app:cardMaxElevation="5dp"
+    android:layout_margin="10dp"
+    >
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:orientation="vertical"
+            android:layout_margin="15dp"
+            android:padding="4dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content">
+            <TextView
+                android:id="@+id/tvTopicName"
+                android:text="Title"
+                android:textSize="19sp"
+                android:textStyle="bold"
+                android:layout_margin="6dp"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"/>
+
+            <Button
+                android:id="@+id/btnRespuesta"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Ir a las preguntas" />
+
+        </LinearLayout>
+    </LinearLayout>
+
+</androidx.cardview.widget.CardView>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelTokenNotFound.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelTokenNotFound.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelTokenNotFound.kt
new file mode 100644
--- /dev/null	(date 1694511184000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelTokenNotFound.kt	(date 1694511184000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.utils.exception
+
+class ModelTokenNotFound(override val message:String):Exception(message)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesDownloadUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesDownloadUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesDownloadUC.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesDownloadUC.kt	(date 1695760840000)
@@ -0,0 +1,25 @@
+package cl.daracenad.elearning.exercises.domain.usecase.school.course
+
+import cl.daracenad.elearning.exercises.domain.service.download.AnswerDownloadSrv
+import cl.daracenad.elearning.exercises.domain.service.download.CourseDownloadSrv
+import cl.daracenad.elearning.exercises.domain.service.download.QuestionDownloadSrv
+import cl.daracenad.elearning.exercises.domain.service.download.TestTemplateDownloadSrv
+import cl.daracenad.elearning.exercises.domain.service.download.TopicDownloadSrv
+import javax.inject.Inject
+
+class CoursesDownloadUC @Inject constructor(
+    val courseDownloadSrv: CourseDownloadSrv,
+    val topicDownloadSrv: TopicDownloadSrv,
+    val testTemplateDownloadSrv: TestTemplateDownloadSrv,
+    val questionDownloadSrv: QuestionDownloadSrv,
+    val answerDownloadSrv: AnswerDownloadSrv
+) {
+    suspend operator fun invoke(){
+        courseDownloadSrv.invoke()
+        topicDownloadSrv.invoke()
+        testTemplateDownloadSrv.invoke()
+        questionDownloadSrv.invoke()
+        answerDownloadSrv.invoke()
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Matriculate.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Matriculate.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Matriculate.kt
new file mode 100644
--- /dev/null	(date 1694441546000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Matriculate.kt	(date 1694441546000)
@@ -0,0 +1,20 @@
+package cl.daracenad.elearning.exercises.domain.model.school
+
+import cl.daracenad.elearning.exercises.data.database.entities.MatriculateEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.EnrolledCourseSerialize
+import cl.daracenad.elearning.exercises.data.network.model.serialize.MatriculateSerialize
+
+data class Matriculate(
+    val id:String,
+    val description:String,
+    val enrolledDate:Int,
+    val enrolledExpirate:Int,
+    var enrolledCourses: List<EnrolledCourse>?
+
+)
+//permite crear un objeto model a partir de un otro
+fun MatriculateSerialize.toDomain(enrolledCourses:List<EnrolledCourse>?) = Matriculate(id = id, description=description, enrolledDate = enrolledDate, enrolledExpirate=enrolledExpirate, enrolledCourses =enrolledCourses )
+fun MatriculateEntity.toDomain(enrolledCourses: List<EnrolledCourse>?) = Matriculate(id = id, description=description, enrolledDate = enrolledDate,  enrolledExpirate=enrolledExpirate, enrolledCourses =enrolledCourses)
+fun Matriculate.toEntity(schoolId:String, studentId:String, status:String) =
+    MatriculateEntity(id = id, schoolId=schoolId, studentId=studentId, description=description, enrolledDate = enrolledDate, enrolledExpirate=enrolledExpirate,status = status)
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IQuestionDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IQuestionDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IQuestionDAO.kt
new file mode 100644
--- /dev/null	(date 1692931851000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IQuestionDAO.kt	(date 1692931851000)
@@ -0,0 +1,31 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.QuestionEntity
+
+@Dao
+interface IQuestionDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: QuestionEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<QuestionEntity>)
+
+    @Update
+    suspend fun update(vararg entity: QuestionEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: QuestionEntity)
+
+    @Query("SELECT * FROM " + QuestionEntity.TABLE_NAME)
+    fun all(): LiveData<List<QuestionEntity>>
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APIDataNotSuccesFull.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APIDataNotSuccesFull.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APIDataNotSuccesFull.kt
new file mode 100644
--- /dev/null	(date 1694511184000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APIDataNotSuccesFull.kt	(date 1694511184000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.utils.exception
+
+class APIDataNotSuccesFull(override val message:String):Exception(message)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/EnrolledCourseEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/EnrolledCourseEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/EnrolledCourseEntity.kt
new file mode 100644
--- /dev/null	(date 1694472161000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/EnrolledCourseEntity.kt	(date 1694472161000)
@@ -0,0 +1,44 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.Index
+import androidx.room.PrimaryKey
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "enrolled_courses",
+    indices = [
+        Index(value=["schoolId","studentId","matriculateId","courseId"], unique = true)],
+    foreignKeys = [
+        ForeignKey(
+            entity = StudentEntity::class,
+            parentColumns = arrayOf("id"),
+            childColumns = arrayOf("studentId")
+        ),
+        ForeignKey(
+            entity = MatriculateEntity::class,
+            parentColumns = arrayOf("id"),
+            childColumns = arrayOf("matriculateId")
+        ),
+        ForeignKey(
+            entity = CourseEntity::class,
+            parentColumns = arrayOf("id"),
+            childColumns = arrayOf("courseId")
+        ),
+    ]
+)
+data class EnrolledCourseEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id:String,
+    @ColumnInfo(name = "studentId") @NotNull var studentId:String,
+    @ColumnInfo(name = "schoolId") @NotNull var schoolId:String,
+    @ColumnInfo(name = "courseId") @NotNull var courseId:String,
+    @ColumnInfo(name = "matriculateId") @NotNull var matriculateId:String,
+    @ColumnInfo(name = "status") @NotNull var status:String
+)
+{
+    companion object {
+        const val TABLE_NAME = "enrolled_courses"
+    }
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/di/NetworkModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/di/NetworkModule.kt b/app/src/main/java/cl/daracenad/elearning/exercises/di/NetworkModule.kt
new file mode 100644
--- /dev/null	(date 1695317986000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/di/NetworkModule.kt	(date 1695317986000)
@@ -0,0 +1,57 @@
+package cl.daracenad.elearning.exercises.di
+
+import cl.daracenad.elearning.exercises.utils.http.HeaderInterceptor
+
+import cl.daracenad.elearning.exercises.data.network.IAPIClient
+import cl.daracenad.elearning.exercises.data.network.ISchoolAPI
+import cl.daracenad.elearning.exercises.data.network.IUserAPI
+import com.google.gson.GsonBuilder
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.components.SingletonComponent
+import okhttp3.OkHttpClient
+import retrofit2.Retrofit
+import retrofit2.converter.gson.GsonConverterFactory
+import javax.inject.Singleton
+
+@Module
+@InstallIn(SingletonComponent::class)
+object NetworkModule{
+    const val URL_API = "https://buscameaqui.cl/api/"
+    @Singleton
+    @Provides
+    fun provideRetrofit():Retrofit{
+        val gson = GsonBuilder().setLenient().create()
+        return Retrofit.Builder()
+            .baseUrl(URL_API)
+            .addConverterFactory(GsonConverterFactory.create(gson))
+            .client(getClient())
+            .build()
+    }
+
+    @Singleton
+    @Provides
+    fun provideAPIClient(retrofit: Retrofit):IAPIClient{
+        return retrofit.create(IAPIClient::class.java)
+    }
+    @Singleton
+    @Provides
+    fun provideSchoolAPI(retrofit: Retrofit):ISchoolAPI{
+        return retrofit.create(ISchoolAPI::class.java)
+    }
+
+    @Singleton
+    @Provides
+    fun provideUserAPI(retrofit: Retrofit):IUserAPI{
+        return retrofit.create(IUserAPI::class.java)
+    }
+
+    private fun getClient(): OkHttpClient {
+        val client = OkHttpClient.Builder()
+            .addInterceptor(HeaderInterceptor())
+            .build()
+
+        return client
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/MainActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1692986857000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/MainActivity.kt	(date 1692986857000)
@@ -0,0 +1,36 @@
+package cl.daracenad.elearning.exercises.ui
+
+import android.os.Bundle
+import com.google.android.material.bottomnavigation.BottomNavigationView
+import androidx.appcompat.app.AppCompatActivity
+import androidx.navigation.findNavController
+import androidx.navigation.ui.AppBarConfiguration
+import androidx.navigation.ui.setupActionBarWithNavController
+import androidx.navigation.ui.setupWithNavController
+import cl.daracenad.elearning.exercises.R
+import cl.daracenad.elearning.exercises.databinding.ActivityMainBinding
+
+class MainActivity : AppCompatActivity() {
+
+    private lateinit var binding: ActivityMainBinding
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        binding = ActivityMainBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+
+        val navView: BottomNavigationView = binding.navView
+
+        val navController = findNavController(R.id.nav_host_fragment_activity_main)
+        // Passing each menu ID as a set of Ids because each
+        // menu should be considered as top level destinations.
+        val appBarConfiguration = AppBarConfiguration(
+            setOf(
+                R.id.navigation_home, R.id.navigation_dashboard, R.id.navigation_notifications
+            )
+        )
+        setupActionBarWithNavController(navController, appBarConfiguration)
+        navView.setupWithNavController(navController)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/TopicAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/TopicAdapter.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/TopicAdapter.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/TopicAdapter.kt	(date 1695386366000)
@@ -0,0 +1,42 @@
+package cl.daracenad.elearning.exercises.ui.adapter
+
+
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+
+import cl.daracenad.elearning.exercises.databinding.CardTopicBinding
+
+class TopicAdapter :RecyclerView.Adapter<TopicAdapter.TopicViewHolder>() {
+
+    private var oldData = emptyList<AppParameterEntity>()
+
+    class TopicViewHolder(val binding: CardTopicBinding) : RecyclerView.ViewHolder(binding.root)
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TopicViewHolder {
+        return TopicViewHolder(
+            CardTopicBinding.inflate(
+                LayoutInflater.from(parent.context),
+            parent,
+            false)
+        )
+    }
+    override fun onBindViewHolder(holder: TopicViewHolder, position: Int) {
+
+        holder.binding.tvTopicName.text = oldData[position].key.toString()
+
+    }
+
+    override fun getItemCount(): Int {
+
+        return oldData.size
+    }
+
+    fun setData(newData: List<AppParameterEntity>){
+        oldData = newData
+        notifyDataSetChanged()
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ExerciseApp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ExerciseApp.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ExerciseApp.kt
new file mode 100644
--- /dev/null	(date 1692986966000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ExerciseApp.kt	(date 1692986966000)
@@ -0,0 +1,8 @@
+package cl.daracenad.elearning.exercises
+
+import android.app.Application
+import dagger.hilt.android.HiltAndroidApp
+
+@HiltAndroidApp
+class ExerciseApp:Application() {
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/ISchoolAPI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/ISchoolAPI.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/ISchoolAPI.kt
new file mode 100644
--- /dev/null	(date 1695317986000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/ISchoolAPI.kt	(date 1695317986000)
@@ -0,0 +1,17 @@
+package cl.daracenad.elearning.exercises.data.network
+
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.EnrolledCoursePost
+import retrofit2.Response
+import retrofit2.http.Body
+import retrofit2.http.Header
+import retrofit2.http.POST
+
+interface ISchoolAPI {
+    @POST(value="user-matriculate")
+    suspend fun matriculate(
+        @Header("Authorization") token: String,
+        @Body enrolledCoursePost: EnrolledCoursePost
+    ): Response<SchoolResponse>
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/DownloadTableSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/DownloadTableSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/DownloadTableSerialize.kt
new file mode 100644
--- /dev/null	(date 1693108759000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/DownloadTableSerialize.kt	(date 1693108759000)
@@ -0,0 +1,6 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import cl.daracenad.elearning.exercises.data.database.entities.DownloadTableEntity
+
+data class DownloadTableSerialize(val id:Int, val schoolId:String, val tableName:String, val version:String, val status:String)
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Course.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Course.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Course.kt
new file mode 100644
--- /dev/null	(date 1695736540000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/Course.kt	(date 1695736540000)
@@ -0,0 +1,22 @@
+package cl.daracenad.elearning.exercises.domain.model.school
+
+import cl.daracenad.elearning.exercises.data.database.entities.CourseEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.CourseSerialize
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+
+data class Course(
+    var id:String,
+    val name:String,
+    val description:String,
+    val type:String,
+    val duration:Int,
+    val status:String
+)
+
+fun CourseSerialize.toDomain(status:String = "PD") =
+    Course(id = id, name = name, description = description, type=type, duration=duration, status=status)
+fun CourseEntity.toDomain(status: String="PD") =
+    Course(id = id,  name = name, description = description, type=type, duration=duration, status=status)
+fun Course.toEntity(schoolId:String, status: String="PD") =
+    CourseEntity(id = id, schoolId=schoolId, name = name, description = description, type=type, duration=duration, status =status)
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/EnrolledCourse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/EnrolledCourse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/EnrolledCourse.kt
new file mode 100644
--- /dev/null	(date 1694441070000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/school/EnrolledCourse.kt	(date 1694441070000)
@@ -0,0 +1,15 @@
+package cl.daracenad.elearning.exercises.domain.model.school
+
+import cl.daracenad.elearning.exercises.data.database.entities.EnrolledCourseEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.EnrolledCourseSerialize
+
+class EnrolledCourse(
+    var id:String,
+    val courses: List<Course>?
+)
+fun EnrolledCourseSerialize.toDomain(courses: List<Course>?) =
+    EnrolledCourse(id = id, courses = courses)
+fun EnrolledCourseEntity.toDomain() =
+    EnrolledCourse(id, null)
+fun EnrolledCourse.toEntity(studentId:String, schoolId:String, courseId:String, matriculateId:String, status:String) =
+    EnrolledCourseEntity(id = id,studentId = studentId, schoolId = schoolId, courseId = courseId, matriculateId = matriculateId, status = status)
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1692228948000)
+++ b/.idea/compiler.xml	(date 1692228948000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="17" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Answer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Answer.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Answer.kt
new file mode 100644
--- /dev/null	(date 1694264411000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Answer.kt	(date 1694264411000)
@@ -0,0 +1,17 @@
+package cl.daracenad.elearning.exercises.domain.model.test
+
+import cl.daracenad.elearning.exercises.data.database.entities.AnswerEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.AnswerSerialize
+
+class Answer(
+    val id:String,
+    val name:String,
+    val description:String,
+    val isOk:Boolean,
+    val status:String,
+    val questionId:String
+)
+//permite crear un objeto model a partir de un serialize
+fun AnswerSerialize.toDomain() = Answer(id = answerId, name = answerName, description = answerDescription, answerIsOk, status = "AC" ,questionId =  questionId)
+fun AnswerEntity.toDomain() = Answer(id, name, description,isOk,status, questionId)
+fun Answer.toEntity() = AnswerEntity(id, name, description,isOk,status, questionId)
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/TestTemplate.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/TestTemplate.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/TestTemplate.kt
new file mode 100644
--- /dev/null	(date 1694264411000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/TestTemplate.kt	(date 1694264411000)
@@ -0,0 +1,18 @@
+package cl.daracenad.elearning.exercises.domain.model.test
+
+import cl.daracenad.elearning.exercises.data.database.entities.TestTemplateEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.TestTemplateSerialize
+
+
+data class TestTemplate (
+    val id:String,
+    val topicId:String,
+    val name:String,
+    val description:String,
+    val status:String,
+    val type:String
+)
+//permite crear un objeto model a partir de un serialize
+fun TestTemplateSerialize.toDomain() = TestTemplate(id = id, topicId=topicId, name = name, description = description,status = "AC" ,type = type)
+fun TestTemplateEntity.toDomain() = TestTemplate(id = id, topicId=topicId, name = name, description = description,status = "AC" ,type = type)
+fun TestTemplate.toEntity() = TestTemplateEntity(id = id, topicId=topicId, name = name, description = description,status = "AC" ,type = type)
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/DonwloadTable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/DonwloadTable.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/DonwloadTable.kt
new file mode 100644
--- /dev/null	(date 1694264411000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/DonwloadTable.kt	(date 1694264411000)
@@ -0,0 +1,16 @@
+package cl.daracenad.elearning.exercises.domain.model.sys
+
+import cl.daracenad.elearning.exercises.data.database.entities.DownloadTableEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.DownloadTableSerialize
+
+
+data class DonwloadTable(
+    val id:Int,
+    val schoolId:String,
+    val tableName:String,
+    val version:String,
+    val status:String
+
+)
+//fun DownloadTableEntity.toDomain() = DonwloadTable(id, schoolId,tableName,version,status)
+//  fun DownloadTableSerialize.toDomain() = DonwloadTable(id, schoolId,tableName,version,status)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ICourseDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ICourseDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ICourseDAO.kt
new file mode 100644
--- /dev/null	(date 1695735270000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ICourseDAO.kt	(date 1695735270000)
@@ -0,0 +1,37 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.CourseEntity
+
+@Dao
+interface ICourseDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: CourseEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<CourseEntity>)
+
+    @Update
+    suspend fun update(vararg entity: CourseEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: CourseEntity)
+
+    @Query("select * from  ${CourseEntity.TABLE_NAME}")
+    fun all(): List<CourseEntity>
+
+    @Query("select exists(select * from  ${CourseEntity.TABLE_NAME} where status = 'PD')")
+    fun isPendingInstallation(): Boolean
+
+    @Query("select * from  ${CourseEntity.TABLE_NAME} where status = 'PD'")
+    fun pendingInstallation(): List<CourseEntity>
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/sys/DonwloadTableResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/sys/DonwloadTableResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/sys/DonwloadTableResponse.kt
new file mode 100644
--- /dev/null	(date 1694263538000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/sys/DonwloadTableResponse.kt	(date 1694263538000)
@@ -0,0 +1,11 @@
+package cl.daracenad.elearning.exercises.data.network.model.sys
+
+
+import cl.daracenad.elearning.exercises.data.network.model.serialize.DownloadTableSerialize
+import com.google.gson.annotations.SerializedName
+
+data class DonwloadTableResponse(
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String>,
+    @SerializedName("downloadTables") val downloadTables:List<DownloadTableSerialize>
+)
Index: app/src/main/res/layout/activity_register.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".io.model.response.RegisterActivity\">\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Registrar\"\n            android:textSize=\"60sp\"\n            android:layout_marginTop=\"30dp\"\n            android:layout_marginLeft=\"25dp\"\n            >\n        </TextView>\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/completa_el_formulario\"\n            android:textSize=\"20sp\"\n            android:layout_marginTop=\"25dp\"\n            android:layout_marginLeft=\"8dp\"\n            >\n        </TextView>\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:layout_marginRight=\"25dp\"\n            android:hint=\"@string/nombre_y_apellido\"\n            android:inputType=\"textPersonName\"\n            android:textSize=\"20sp\"></EditText>\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:layout_marginRight=\"25dp\"\n            android:hint=\"@string/ingresa_tu_correo_electronico\"\n            android:inputType=\"textEmailAddress\"\n            android:textSize=\"20sp\"></EditText>\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:layout_marginRight=\"25dp\"\n            android:hint=\"@string/ingresa_tu_contasena\"\n            android:inputType=\"textPassword\"\n            android:textSize=\"20sp\"></EditText>\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:layout_marginRight=\"25dp\"\n            android:hint=\"@string/repetir_contrasena\"\n            android:inputType=\"textPassword\"\n            android:textSize=\"20sp\"></EditText>\n    </LinearLayout>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:layout_gravity=\"bottom\"\n        android:gravity=\"center_horizontal\">\n        <Button\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/registrarse\"\n            android:layout_marginRight=\"25dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:backgroundTint=\"@color/btn_color\"\n            ></Button>\n\n        <TextView\n            android:id=\"@+id/tv_go_to_login\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"20dp\"\n            android:layout_marginBottom=\"20dp\"\n            android:text=\"@string/volver_al_login\">\n\n        </TextView>\n\n    </LinearLayout>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_register.xml b/app/src/main/res/layout/activity_register.xml
--- a/app/src/main/res/layout/activity_register.xml	(revision fb0d643ef364836986f794847ac445143be2658f)
+++ b/app/src/main/res/layout/activity_register.xml	(date 1695303897000)
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".io.model.response.RegisterActivity">
+    tools:context=".ui.profile.RegisterActivity">
     <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="match_parent"
@@ -27,16 +27,19 @@
             android:layout_marginLeft="8dp"
             >
         </TextView>
+
         <EditText
+            android:id="@+id/etNombres"
             android:layout_width="match_parent"
             android:layout_height="50dp"
-            android:layout_marginTop="15dp"
             android:layout_marginLeft="25dp"
+            android:layout_marginTop="15dp"
             android:layout_marginRight="25dp"
             android:hint="@string/nombre_y_apellido"
             android:inputType="textPersonName"
             android:textSize="20sp"></EditText>
         <EditText
+            android:id="@+id/etEMail"
             android:layout_width="match_parent"
             android:layout_height="50dp"
             android:layout_marginTop="15dp"
@@ -46,6 +49,7 @@
             android:inputType="textEmailAddress"
             android:textSize="20sp"></EditText>
         <EditText
+            android:id="@+id/etPassword"
             android:layout_width="match_parent"
             android:layout_height="50dp"
             android:layout_marginTop="15dp"
@@ -55,6 +59,7 @@
             android:inputType="textPassword"
             android:textSize="20sp"></EditText>
         <EditText
+            android:id="@+id/etPasswordConfirmation"
             android:layout_width="match_parent"
             android:layout_height="50dp"
             android:layout_marginTop="15dp"
@@ -63,21 +68,30 @@
             android:hint="@string/repetir_contrasena"
             android:inputType="textPassword"
             android:textSize="20sp"></EditText>
-    </LinearLayout>
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:orientation="vertical"
-        android:layout_gravity="bottom"
-        android:gravity="center_horizontal">
+
+        <TextView
+            android:id="@+id/tvMessage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="8dp"
+            android:layout_marginTop="25dp"
+            android:textSize="20sp" />
+
         <Button
+            android:id="@+id/btnGoToConfirmation"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text="@string/registrarse"
+            android:layout_marginLeft="25dp"
             android:layout_marginRight="25dp"
-            android:layout_marginLeft="25dp"
-            android:backgroundTint="@color/btn_color"
-            ></Button>
+            android:onClick="btnGoToConfirmation"
+            android:text="@string/registrarse"></Button>
+
+        <Button
+            android:id="@+id/tv_go_to_delete"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:onClick="btnDelete"
+            android:text="Delete" />
 
         <TextView
             android:id="@+id/tv_go_to_login"
@@ -91,4 +105,14 @@
 
     </LinearLayout>
 
-</androidx.coordinatorlayout.widget.CoordinatorLayout>
\ No newline at end of file
+    <ProgressBar
+        android:id="@+id/loading"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="invisible"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/SchoolSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/SchoolSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/SchoolSerialize.kt
new file mode 100644
--- /dev/null	(date 1694315983000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/SchoolSerialize.kt	(date 1694315983000)
@@ -0,0 +1,13 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class SchoolSerialize (
+    @SerializedName("id") val id:String,
+    @SerializedName("name") val name:String ,
+    @SerializedName("description") val description : String,
+    @SerializedName("token") val token : String?,
+    @SerializedName("student") val student : StudentSerialize?,
+    @SerializedName("courses") val courses : List<CourseSerialize>?,
+
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/usercase/DTOResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/usercase/DTOResult.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/usercase/DTOResult.kt
new file mode 100644
--- /dev/null	(date 1694621053000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/usercase/DTOResult.kt	(date 1694621053000)
@@ -0,0 +1,9 @@
+package cl.daracenad.elearning.exercises.utils.usercase
+
+sealed class DTOResult<T>(val data: T? = null, val message: String? = null) {
+
+    class Success<T>(data: T) : DTOResult<T>(data)
+    class Error<T>(message: String?, data: T? = null) : DTOResult<T>(data, message)
+    class Loading<T> : DTOResult<T>()
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IParameterDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IParameterDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IParameterDAO.kt
new file mode 100644
--- /dev/null	(date 1693360747000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IParameterDAO.kt	(date 1693360747000)
@@ -0,0 +1,37 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import kotlinx.coroutines.flow.Flow
+
+@Dao
+interface IParameterDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: AppParameterEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<AppParameterEntity>)
+
+    @Update
+    suspend fun update(vararg entity: AppParameterEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: AppParameterEntity)
+
+    @Query("SELECT * FROM " + AppParameterEntity.TABLE_NAME)
+    fun all(): Flow<List<AppParameterEntity>>
+
+    @Query("SELECT * FROM " + AppParameterEntity.TABLE_NAME + " where key = :key")
+    fun findForKey(key:String): AppParameterEntity
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/CourseViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/CourseViewHolder.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/CourseViewHolder.kt
new file mode 100644
--- /dev/null	(date 1694395913000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/CourseViewHolder.kt	(date 1694395913000)
@@ -0,0 +1,25 @@
+package cl.daracenad.elearning.exercises.ui.school.adapter
+
+import android.view.View
+
+import android.widget.Toast
+import androidx.recyclerview.widget.RecyclerView
+
+import cl.daracenad.elearning.exercises.databinding.CardCourseBinding
+import cl.daracenad.elearning.exercises.domain.model.school.Course
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+
+class CourseViewHolder(view: View) : RecyclerView.ViewHolder(view){
+    val binding = CardCourseBinding.bind(view)
+
+    fun render(courseSelected: CourseSelected, onClickListener:(CourseSelected, Boolean) -> Unit){
+        binding.chkCuorse.text = courseSelected.course.name.toString()
+        binding.chkCuorse.isChecked = courseSelected.selected
+        binding.chkCuorse.setOnClickListener {
+            //Toast.makeText(binding.chkCuorse.context,"click curso ${course.name}", Toast.LENGTH_LONG).show()
+            courseSelected.selected = binding.chkCuorse.isChecked
+            onClickListener(courseSelected, binding.chkCuorse.isChecked)
+        }
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/model/CourseSelected.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/model/CourseSelected.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/model/CourseSelected.kt
new file mode 100644
--- /dev/null	(date 1695759147000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/model/CourseSelected.kt	(date 1695759147000)
@@ -0,0 +1,15 @@
+package cl.daracenad.elearning.exercises.ui.school.model
+
+
+import cl.daracenad.elearning.exercises.domain.model.school.Course
+
+data class CourseSelected(
+
+   val course: Course,
+   var selected:Boolean
+){
+   var id:String
+      get()= course.id
+      set(value) {course.id = value}
+
+}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1695685173000)
+++ b/.idea/misc.xml	(date 1695685173000)
@@ -0,0 +1,16 @@
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="corretto-17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+  <component name="VisualizationToolProject">
+    <option name="state">
+      <ProjectState>
+        <option name="scale" value="0.6856918334960938" />
+      </ProjectState>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterActivity.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterActivity.kt	(date 1695386366000)
@@ -0,0 +1,90 @@
+package cl.daracenad.elearning.exercises.ui.profile
+
+import android.annotation.SuppressLint
+import android.content.Intent
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+
+import android.view.View
+import android.widget.Toast
+import androidx.activity.viewModels
+import androidx.core.view.isVisible
+import androidx.lifecycle.lifecycleScope
+import cl.daracenad.elearning.exercises.databinding.ActivityRegisterBinding
+import cl.daracenad.elearning.exercises.di.RoomModule
+import cl.daracenad.elearning.exercises.ui.sys.AppCheckActivity
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.launch
+
+@AndroidEntryPoint
+class RegisterActivity : AppCompatActivity() {
+
+    private lateinit var _binding: ActivityRegisterBinding
+
+    private val viewmodel: RegisterVM by viewModels()
+
+    @SuppressLint("MissingInflatedId")
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        _binding = ActivityRegisterBinding.inflate(layoutInflater)
+        setContentView(_binding.root)
+        val view = _binding.root
+        setContentView(view)
+        bindObservers()
+    }
+
+    fun btnGoToConfirmation(v: View) {
+        _binding.let {
+            viewmodel.register(
+                "${it.etEMail.text}",
+                "${it.etNombres.text}",
+                "${it.etPassword.text}",
+                "${it.etPasswordConfirmation.text}")
+        }
+    }
+    fun btnDelete(v:View){
+        lifecycleScope.launch {
+            applicationContext.deleteDatabase(RoomModule.DATABASE_NAME)
+
+            Toast.makeText(applicationContext, "UserSerialize Information is Delete", Toast.LENGTH_SHORT)
+                .show()
+        }
+    }
+    private fun goAppCheckActivity() {
+        val intent = Intent(this, AppCheckActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+
+    private fun bindObservers(){
+        viewmodel.message.observe(this, {
+            _binding.loading.isVisible = false
+            _binding.tvMessage.text = it
+        })
+
+        viewmodel.userAPILiveData.observe(this, {
+            _binding.loading.isVisible = false
+
+            when (it) {
+                is DTOResult.Success -> {
+                    _binding.tvMessage.text = it.message
+                    goAppCheckActivity()
+
+                }
+
+                is DTOResult.Error -> {
+                    _binding.tvMessage.text = it.message
+                }
+                is DTOResult.Loading -> {
+
+                    _binding.loading.isVisible = true
+                }
+            }
+        })
+
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterVM.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterVM.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterVM.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/RegisterVM.kt	(date 1695386366000)
@@ -0,0 +1,37 @@
+package cl.daracenad.elearning.exercises.ui.profile
+
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.usecase.profile.RegisterUC
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.CoroutineExceptionHandler
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class RegisterVM @Inject constructor(
+    private val registerUC: RegisterUC
+) : ViewModel() {
+
+    val exceptionHandler = CoroutineExceptionHandler { _, throwable ->
+        message.postValue("Error de conexión")
+    }
+
+    val userAPILiveData: LiveData<DTOResult<School>>
+        get() = registerUC.userResponseLiveData
+
+    val message = MutableLiveData<String>()
+
+    fun register(email: String, name: String, password: String, passwordConfirm: String) {
+        viewModelScope.launch(Dispatchers.IO + exceptionHandler) {
+            registerUC.invoke(email, name, password, passwordConfirm)
+        }
+    }
+}
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CoursesForInstallationAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CoursesForInstallationAdapter.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CoursesForInstallationAdapter.kt
new file mode 100644
--- /dev/null	(date 1695758220000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CoursesForInstallationAdapter.kt	(date 1695758220000)
@@ -0,0 +1,31 @@
+package cl.daracenad.elearning.exercises.ui.school.download.adapter
+
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import cl.daracenad.elearning.exercises.R
+import cl.daracenad.elearning.exercises.databinding.ActivityCoursesForInstallationBinding
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+
+class CoursesForInstallationAdapter(
+    var lstCourses:List<CourseSelected>,
+    val onClickListener:(CourseSelected, Boolean) -> Unit
+): RecyclerView.Adapter<CourseViewHolder>() {
+    private lateinit var binding: ActivityCoursesForInstallationBinding
+
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseViewHolder {//CourseViewHolder {
+        return CourseViewHolder(
+            LayoutInflater.from(parent.context).inflate(R.layout.card_coures_download, parent, false)
+        )
+    }
+
+    override fun getItemCount(): Int {
+        return lstCourses.size
+    }
+
+    override fun onBindViewHolder(holder: CourseViewHolder, position: Int) {
+        holder.render(lstCourses[position],onClickListener)
+    }
+
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdGetSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdGetSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdGetSrv.kt
new file mode 100644
--- /dev/null	(date 1695760841000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdGetSrv.kt	(date 1695760841000)
@@ -0,0 +1,18 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.utils.exception.ModelStudentIdNotFound
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppStudentIdGetSrv @Inject constructor(
+    private val appParameterFindSrv: AppParameterFindSrv
+) {
+
+    suspend operator fun invoke(): String {
+        val parameter = appParameterFindSrv.invoke(User.STUDENT_ID)
+        if (!parameter.exists) {
+            throw ModelStudentIdNotFound("Debe volver a realizar un Login")
+        }
+        return parameter.valueString
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/CoursesAllUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/CoursesAllUseCase.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/CoursesAllUseCase.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/CoursesAllUseCase.kt	(date 1695386366000)
@@ -0,0 +1,54 @@
+package cl.daracenad.elearning.exercises.domain
+
+
+import cl.daracenad.elearning.exercises.data.DownloadTestAPI
+import cl.daracenad.elearning.exercises.domain.model.school.Course
+import cl.daracenad.elearning.exercises.domain.usecase.user.AppInfoLocalUC
+import javax.inject.Inject
+
+class CoursesAllUseCase @Inject constructor(
+    private val downloadTestAPI: DownloadTestAPI,
+    private val userGetInfoLocalUC: AppInfoLocalUC,
+
+    ){
+    suspend operator fun invoke(): List<Course>? {
+
+        val user = userGetInfoLocalUC.invoke()
+/*
+        var downloadResponse = repository.downloadCoursesFromAPI(
+            "Bearer ${user.token}",
+            user.schoolId,
+            0
+        )
+*/
+        val downloadResponse = downloadTestAPI.downloadCoursesFromAPI(
+            "Bearer ",
+            "user.schoolId",
+            0
+        )
+
+
+        if (downloadResponse != null) {
+            if (downloadResponse.success == 0) {
+                if (downloadResponse.download) {
+                    //insertar los datos.
+                    //val tmp = downloadResponse.courses
+
+                    //return  tmp.map {
+                    //    it.toDomain()
+                    //}
+                } else {
+
+                    return null
+                }
+            }
+        } else {
+
+
+            return null
+        }
+
+
+        return null
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CourseViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CourseViewHolder.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CourseViewHolder.kt
new file mode 100644
--- /dev/null	(date 1695758124000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/adapter/CourseViewHolder.kt	(date 1695758124000)
@@ -0,0 +1,19 @@
+package cl.daracenad.elearning.exercises.ui.school.download.adapter
+
+import android.view.View
+import androidx.recyclerview.widget.RecyclerView
+import cl.daracenad.elearning.exercises.databinding.CardCouresDownloadBinding
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+
+class CourseViewHolder(view: View) : RecyclerView.ViewHolder(view){
+    val binding = CardCouresDownloadBinding.bind(view)
+
+    fun render(courseSelected: CourseSelected, onClickListener:(CourseSelected, Boolean) -> Unit){
+        binding.tvCourseDownload.text = courseSelected.course.name.toString()
+
+        binding.btnCourseDownload.setOnClickListener {
+            onClickListener(courseSelected, true)
+        }
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/IUserAPI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/IUserAPI.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/IUserAPI.kt
new file mode 100644
--- /dev/null	(date 1695317986000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/IUserAPI.kt	(date 1695317986000)
@@ -0,0 +1,34 @@
+package cl.daracenad.elearning.exercises.data.network
+
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.EnrolledCoursePost
+import retrofit2.Response
+import retrofit2.http.Body
+import retrofit2.http.GET
+import retrofit2.http.Header
+import retrofit2.http.POST
+import retrofit2.http.Query
+
+interface IUserAPI {
+    //ocupadas
+    @POST(value="register")
+    suspend fun registerPOST(
+        @Query(value="name") name:String,
+        @Query(value="email") email:String,
+        @Query(value="password") password:String,
+        @Query(value="password_confirmation") password_confirmation:String
+    ): Response<SchoolResponse>
+
+    @GET(value="user-profile")
+    suspend fun userProfileGET(
+        @Header("Authorization") token: String,
+        @Query(value="student") studentId:String
+    ): Response<SchoolResponse>
+
+    @POST(value="login")
+    suspend fun loginPOST(
+        @Query(value="email") email:String,
+        @Query(value="password") password:String
+    ): Response<SchoolResponse>
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailGetSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailGetSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailGetSrv.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailGetSrv.kt	(date 1695760840000)
@@ -0,0 +1,18 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.domain.model.User
+import cl.daracenad.elearning.exercises.utils.exception.ModelTokenNotFound
+import javax.inject.Inject
+
+class AppEmailGetSrv@Inject constructor(
+    private val appParameterFindSrv: AppParameterFindSrv
+){
+
+    suspend operator fun invoke(): String {
+        val parameter = appParameterFindSrv.invoke(User.EMAIL)
+        if (!parameter.exists) {
+            throw ModelTokenNotFound("Debe volver a realizar un Login")
+        }
+        return parameter.valueString
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/UserProfileUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/UserProfileUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/UserProfileUC.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/UserProfileUC.kt	(date 1695760840000)
@@ -0,0 +1,120 @@
+package cl.daracenad.elearning.exercises.domain
+
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.network.IUserAPI
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.model.school.toDomain
+import cl.daracenad.elearning.exercises.domain.service.app.AppStudentIdGetSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppTokenGetSrv
+import cl.daracenad.elearning.exercises.utils.exception.APIDataNotSuccesFull
+import cl.daracenad.elearning.exercises.utils.exception.APINotSuccesFull
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import org.json.JSONObject
+import retrofit2.Response
+import javax.inject.Inject
+
+class UserProfileUC @Inject constructor(
+    private val userTokenGetUC: AppTokenGetSrv,
+    private val userStudentIdGetUC: AppStudentIdGetSrv,
+    private val api: IUserAPI
+) {
+    private val _dtoResultLD = MutableLiveData<DTOResult<School>>()
+    val dtoResultLD: LiveData<DTOResult<School>>
+        get() = _dtoResultLD
+
+    suspend operator fun invoke(){
+        _dtoResultLD.postValue(DTOResult.Loading())
+        val token = userTokenGetUC.invoke()
+        val studentId = userStudentIdGetUC.invoke()
+
+        val response = api.userProfileGET("Bearer $token",studentId)
+        val dtoResult = handleResponse(response)
+
+        when (dtoResult) {
+            is DTOResult.Success -> {
+                _dtoResultLD.postValue(dtoResult)
+            }
+            is DTOResult.Error -> {
+                _dtoResultLD.postValue(dtoResult)
+            }
+            is DTOResult.Loading -> {
+
+            }
+        }
+    }
+
+    private fun responseToSchool(response: Response<SchoolResponse>): School? {
+        var school: School? = null
+
+        if (response?.isSuccessful == true) {
+            val body = response.body()
+
+            if (body?.success == 0) {
+                school = body.school.let { it?.toDomain() }
+                if (school != null) {
+                    school.student = body.school?.student.let {
+                        it?.toDomain(school.id)
+                    }
+                    if (body.school?.student?.matriculates != null) {
+                        school?.student?.matriculates =
+                            body.school?.student?.matriculates?.map { matriculateSerialize ->
+                                matriculateSerialize.toDomain(
+                                    matriculateSerialize.enrolledCourses?.map { enrolledCourseSerialize ->
+                                        enrolledCourseSerialize.toDomain(
+                                            enrolledCourseSerialize.courses?.map { courseSerialize ->
+                                                courseSerialize.toDomain("PD")
+                                            }
+                                        )
+                                    }
+                                )
+                            }
+                    }
+
+                    if (body.school != null) {
+                        school.courses = body.school?.courses?.map {
+                            it.toDomain("PD")
+                        }!!
+                    }
+                }
+            } else {
+                throw APIDataNotSuccesFull("${body?.messages?.get(0)}")
+            }
+        } else {
+            throw APINotSuccesFull("Registro: No se pudo registrar intente más tarde ${response?.message()}")
+        }
+        return school
+
+    }
+
+    private fun handleResponse(response: Response<SchoolResponse>?): DTOResult<School> {
+        if (response != null) {
+            if (response.isSuccessful && response?.body() != null) {
+
+                if (response.body()!!.success != 0) {
+                    //_userResponseLiveData.postValue(
+                    return DTOResult.Error("${response.body()!!.messages?.get(0)}")
+                    //)
+                } else {
+                    //_userResponseLiveData.postValue(
+                    return DTOResult.Success(responseToSchool(response)!!)
+                    //)
+                }
+            } else if (response.errorBody() != null) {
+
+                val errorObj = JSONObject(response.errorBody()!!.charStream().readText())
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error(errorObj.getString("message"))
+                //)
+            } else {
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error("Something Went Wrong")
+                //)
+            }
+        }
+        return DTOResult.Error("Sin retorno de información desde el servidor")
+    }
+
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".io.ui.LoginActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Login\"\n            android:textSize=\"60sp\"\n            android:layout_marginTop=\"60dp\"\n            android:layout_marginLeft=\"60dp\"\n            >\n        </TextView>\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/ingresa_tu_correo_y_contrasena\"\n            android:textSize=\"20sp\"\n            android:layout_marginTop=\"25dp\"\n            android:layout_marginLeft=\"8dp\"\n            >\n        </TextView>\n        <EditText\n            android:id=\"@+id/etEMail\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:layout_marginRight=\"25dp\"\n            android:hint=\"@string/ingresa_tu_correo_electronico\"\n            android:inputType=\"textEmailAddress\"\n            android:textSize=\"20sp\"></EditText>\n        <EditText\n            android:id=\"@+id/etPassword\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:layout_marginRight=\"25dp\"\n            android:hint=\"@string/ingresa_tu_contasena\"\n            android:inputType=\"textPassword\"\n            android:textSize=\"20sp\"></EditText>\n    </LinearLayout>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:layout_gravity=\"bottom\"\n        android:gravity=\"center_horizontal\"\n        >\n\n        <Button\n            android:id=\"@+id/btnInitLogin\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/iniciar_sesion\"\n            android:layout_marginRight=\"25dp\"\n            android:layout_marginLeft=\"25dp\"\n            android:backgroundTint=\"@color/btn_color\"\n            ></Button>\n        <TextView\n            android:id=\"@+id/tv_go_register\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"20dp\"\n            android:layout_marginBottom=\"20dp\"\n            android:text=\"@string/registrate\">\n\n        </TextView>\n\n\n    </LinearLayout>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_login.xml b/app/src/main/res/layout/activity_login.xml
--- a/app/src/main/res/layout/activity_login.xml	(revision fb0d643ef364836986f794847ac445143be2658f)
+++ b/app/src/main/res/layout/activity_login.xml	(date 1695303897000)
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".io.ui.LoginActivity">
+    tools:context=".ui.profile.LoginActivity">
 
     <LinearLayout
         android:layout_width="match_parent"
@@ -38,6 +38,7 @@
             android:hint="@string/ingresa_tu_correo_electronico"
             android:inputType="textEmailAddress"
             android:textSize="20sp"></EditText>
+
         <EditText
             android:id="@+id/etPassword"
             android:layout_width="match_parent"
@@ -48,35 +49,48 @@
             android:hint="@string/ingresa_tu_contasena"
             android:inputType="textPassword"
             android:textSize="20sp"></EditText>
-    </LinearLayout>
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:orientation="vertical"
-        android:layout_gravity="bottom"
-        android:gravity="center_horizontal"
-        >
+
+        <TextView
+            android:id="@+id/tvMessage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:textSize="20sp"
+            android:layout_marginTop="25dp"
+            android:layout_marginLeft="8dp" />
 
         <Button
             android:id="@+id/btnInitLogin"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text="@string/iniciar_sesion"
+            android:layout_marginLeft="25dp"
             android:layout_marginRight="25dp"
-            android:layout_marginLeft="25dp"
-            android:backgroundTint="@color/btn_color"
-            ></Button>
+            android:onClick="performLogin"
+            android:text="@string/iniciar_sesion"></Button>
+
         <TextView
-            android:id="@+id/tv_go_register"
-            android:layout_width="wrap_content"
+            android:id="@+id/btn_register"
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
+            android:layout_marginLeft="25dp"
             android:layout_marginTop="20dp"
+            android:layout_marginRight="25dp"
             android:layout_marginBottom="20dp"
+            android:gravity="center"
+            android:onClick="performRegister"
             android:text="@string/registrate">
 
         </TextView>
 
-
     </LinearLayout>
 
-</androidx.coordinatorlayout.widget.CoordinatorLayout>
\ No newline at end of file
+    <ProgressBar
+        android:id="@+id/loading"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="invisible"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginActivity.kt
new file mode 100644
--- /dev/null	(date 1695394320000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginActivity.kt	(date 1695394320000)
@@ -0,0 +1,70 @@
+package cl.daracenad.elearning.exercises.ui.profile
+
+import android.content.Intent
+import android.os.Bundle
+
+import android.view.View
+import androidx.activity.viewModels
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.view.isVisible
+import cl.daracenad.elearning.exercises.databinding.ActivityLoginBinding
+import cl.daracenad.elearning.exercises.ui.sys.AppCheckActivity
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.AndroidEntryPoint
+
+@AndroidEntryPoint
+class LoginActivity : AppCompatActivity() {
+
+    private lateinit var _binding: ActivityLoginBinding
+
+    private val viewmodel: LoginVM by viewModels()
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        _binding = ActivityLoginBinding.inflate(layoutInflater)
+        setContentView(_binding.root)
+        bindObservers()
+
+    }
+
+    fun performLogin(view: View) {
+        _binding.tvMessage.text = ""
+        viewmodel.login(_binding.etEMail.text.toString(), _binding.etPassword.text.toString())
+    }
+    fun performRegister(view: View) {
+        val intent = Intent(this, RegisterActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+
+    private fun goCheckStatusSystem() {
+        val intent = Intent(this, AppCheckActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+
+
+    private fun bindObservers(){
+        viewmodel.message.observe(this, {
+            _binding.loading.isVisible = false
+            _binding.tvMessage.text = it
+        })
+
+        viewmodel.userAPILiveData.observe(this, {
+            _binding.loading.isVisible = false
+            when (it) {
+                is DTOResult.Success -> {
+                    _binding.tvMessage.text = it.message
+                }
+                is DTOResult.Error -> {
+                    _binding.tvMessage.text = it.message
+                }
+                is DTOResult.Loading -> {
+
+                    _binding.loading.isVisible = true
+                }
+            }
+        })
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckActivity.kt
new file mode 100644
--- /dev/null	(date 1695738270000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckActivity.kt	(date 1695738270000)
@@ -0,0 +1,131 @@
+package cl.daracenad.elearning.exercises.ui.sys
+
+import android.annotation.SuppressLint
+import android.content.Intent
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.view.View
+import android.widget.Toast
+import androidx.activity.viewModels
+import androidx.lifecycle.lifecycleScope
+import androidx.recyclerview.widget.LinearLayoutManager
+import cl.daracenad.elearning.exercises.R
+import cl.daracenad.elearning.exercises.databinding.ActivityAppCheckBinding
+import cl.daracenad.elearning.exercises.utils.http.WifiService
+import cl.daracenad.elearning.exercises.di.RoomModule
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_DOWNLOAD_COURSE
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_LOGIN
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_MATRICULATE
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.OK
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_PROFILE_ACTUALIZATE
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_REGISTER
+import cl.daracenad.elearning.exercises.ui.MainActivity
+import cl.daracenad.elearning.exercises.ui.ProfileActivity
+
+import cl.daracenad.elearning.exercises.ui.adapter.AppStatusAdapter
+import cl.daracenad.elearning.exercises.ui.profile.LoginActivity
+import cl.daracenad.elearning.exercises.ui.profile.RegisterActivity
+import cl.daracenad.elearning.exercises.ui.school.MatriculateActivity
+import cl.daracenad.elearning.exercises.ui.school.download.CoursesForInstallationActivity
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+
+@AndroidEntryPoint
+class AppCheckActivity @Inject constructor(
+
+): AppCompatActivity() {
+
+    private val appCheckVM: AppCheckVM by viewModels()
+    private lateinit var binding: ActivityAppCheckBinding
+    private val adapter : AppStatusAdapter by lazy { AppStatusAdapter() }
+
+
+    @SuppressLint("ServiceCast")
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_app_check)
+
+        binding = ActivityAppCheckBinding.inflate(layoutInflater)
+
+        setContentView(binding.root)
+
+        binding.rvAppStatus.layoutManager = LinearLayoutManager(this)
+        binding.rvAppStatus.adapter = adapter
+
+
+        WifiService.instance.initializeWithApplicationContext(this)
+        appCheckVM.listAppStatus.observe(this){
+            if (it != null) {
+                adapter.listAppStatus = it
+                adapter.notifyDataSetChanged()
+            }
+
+        }
+        appCheckVM.loadingAppStatus.observe(this){
+            when(it.rtn){
+                GO_REGISTER-> performRegister()
+                GO_LOGIN-> performLogin()
+                GO_PROFILE_ACTUALIZATE-> performProfile()
+                GO_MATRICULATE-> performMatriculate()
+                GO_DOWNLOAD_COURSE -> performDownloadCourse()
+                OK-> performHome()
+            }
+        }
+
+        appCheckVM.init()
+    }
+
+    private fun performDownloadCourse() {
+        val intent  = Intent(this, CoursesForInstallationActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+
+    private fun performProfile(){
+        Toast.makeText(applicationContext, "Profile", Toast.LENGTH_SHORT)
+            .show()
+        val intent  = Intent(this, ProfileActivity::class.java)
+        startActivity(intent)
+        finish()
+
+    }
+
+    private fun performHome(){
+        Toast.makeText(applicationContext, "UserSerialize Information is Delete", Toast.LENGTH_SHORT)
+            .show()
+
+        val intent  = Intent(this, MainActivity::class.java)
+        startActivity(intent)
+        finish()
+
+    }
+    private fun performRegister(){
+        val intent  = Intent(this, RegisterActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+    private fun performLogin(){
+        val intent  = Intent(this, LoginActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+    private fun performMatriculate(){
+        val intent  = Intent(this, MatriculateActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+
+    fun btnDelete(view:View){
+        lifecycleScope.launch {
+            applicationContext.deleteDatabase(RoomModule.DATABASE_NAME)
+
+            Toast.makeText(applicationContext, "UserSerialize Information is Delete", Toast.LENGTH_SHORT)
+                .show()
+        }
+
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/res/layout/card_coures_download.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/card_coures_download.xml b/app/src/main/res/layout/card_coures_download.xml
new file mode 100644
--- /dev/null	(date 1695758499000)
+++ b/app/src/main/res/layout/card_coures_download.xml	(date 1695758499000)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    app:cardCornerRadius="10dp"
+    app:cardElevation="8dp"
+    app:cardMaxElevation="5dp"
+    android:layout_margin="10dp"
+    >
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:id="@+id/tvCourseDownload"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="15dp"
+            android:layout_weight="4"
+            android:text="TextView" />
+
+        <Button
+            android:id="@+id/btnCourseDownload"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginRight="15dp"
+            android:layout_weight="1"
+            android:text="Descargar" />
+
+    </LinearLayout>
+</androidx.cardview.widget.CardView>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdGetSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdGetSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdGetSrv.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdGetSrv.kt	(date 1695760839000)
@@ -0,0 +1,18 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.domain.model.User
+import cl.daracenad.elearning.exercises.utils.exception.ModelTokenNotFound
+import javax.inject.Inject
+
+class AppSchoolIdGetSrv @Inject constructor(
+    private val appParameterFindSrv: AppParameterFindSrv
+){
+
+    suspend operator fun invoke(): String {
+        val parameter = appParameterFindSrv.invoke(User.SCHOOL_ID)
+        if (!parameter.exists) {
+            throw ModelTokenNotFound("Debe volver a realizar un Login")
+        }
+        return parameter.valueString
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdPutSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdPutSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdPutSrv.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppStudentIdPutSrv.kt	(date 1695760839000)
@@ -0,0 +1,14 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppStudentIdPutSrv @Inject constructor(
+    private val repository: RepositoryDB
+)  {
+    suspend operator fun invoke(studentId:String){
+        repository.parameterInsertFormDB(AppParameterEntity(User.STUDENT_ID,studentId, 0, null))
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdPutSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdPutSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdPutSrv.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppSchoolIdPutSrv.kt	(date 1695760839000)
@@ -0,0 +1,14 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppSchoolIdPutSrv @Inject constructor(
+    private val repository: RepositoryDB
+)  {
+    suspend operator fun invoke(schoolId: String){
+        repository.parameterInsertFormDB(AppParameterEntity(User.SCHOOL_ID,schoolId, 0, null))
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailPutSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailPutSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailPutSrv.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppEmailPutSrv.kt	(date 1695760839000)
@@ -0,0 +1,14 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppEmailPutSrv @Inject constructor(
+    private val repository: RepositoryDB
+)  {
+    suspend operator fun invoke(email:String){
+        repository.parameterInsertFormDB(AppParameterEntity(User.EMAIL,email,0,null ))
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppNamePutSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppNamePutSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppNamePutSrv.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppNamePutSrv.kt	(date 1695760839000)
@@ -0,0 +1,14 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppNamePutSrv @Inject constructor(
+    private val repository: RepositoryDB
+)  {
+    suspend operator fun invoke(name:String){
+        repository.parameterInsertFormDB(AppParameterEntity(User.NAME,name,0,null ))
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginVM.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginVM.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginVM.kt
new file mode 100644
--- /dev/null	(date 1695602718000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/profile/LoginVM.kt	(date 1695602718000)
@@ -0,0 +1,37 @@
+package cl.daracenad.elearning.exercises.ui.profile
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.usecase.profile.LoginUC
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.CoroutineExceptionHandler
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class LoginVM @Inject constructor(
+    private val loginUC: LoginUC
+) : ViewModel() {
+    val exceptionHandler = CoroutineExceptionHandler { _, throwable ->
+        message.postValue("error de comunicación")
+    }
+    val userAPILiveData: LiveData<DTOResult<School>>
+        get() = loginUC.userResponseLiveData
+
+    val message = MutableLiveData<String>()
+
+    fun login(email: String, password: String) {
+        viewModelScope.launch(Dispatchers.IO + exceptionHandler) {
+            loginUC.invoke(email, password)
+
+        }
+    }
+
+}
+
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/LoginUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/LoginUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/LoginUC.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/LoginUC.kt	(date 1695760839000)
@@ -0,0 +1,134 @@
+package cl.daracenad.elearning.exercises.domain.usecase.profile
+
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.network.IUserAPI
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.model.school.toDomain
+import cl.daracenad.elearning.exercises.domain.service.app.AppEmailPutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppNamePutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppSchoolIdPutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppStudentIdPutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppTokenUpdateSrv
+import cl.daracenad.elearning.exercises.utils.exception.APIDataNotSuccesFull
+import cl.daracenad.elearning.exercises.utils.exception.APINotSuccesFull
+
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import org.json.JSONObject
+import retrofit2.Response
+import javax.inject.Inject
+
+class LoginUC @Inject constructor(
+    private val api: IUserAPI,
+    private val appEmailPutSrv: AppEmailPutSrv,
+    private val appSchoolIdPutSrv: AppSchoolIdPutSrv,
+    private val appStudentIdPutSrv: AppStudentIdPutSrv,
+    private val appNamePutSrv: AppNamePutSrv,
+    private val appTokenUpdateSrv: AppTokenUpdateSrv
+) {
+    private val _userResponseLiveData = MutableLiveData<DTOResult<School>>()
+    val userResponseLiveData: LiveData<DTOResult<School>>
+        get() = _userResponseLiveData
+
+    suspend operator fun invoke(user: String, password: String) {//: School? {
+        _userResponseLiveData.postValue(DTOResult.Loading())
+
+        val response = api.loginPOST(user, password)
+        val dtoResult = handleResponse(response)
+        when (dtoResult) {
+            is DTOResult.Success -> {
+                val studentId = dtoResult.data?.student?.id
+                val email = dtoResult.data?.student?.email
+                val name = dtoResult.data?.student?.name
+                val schooldId = dtoResult.data?.id
+                val token  = dtoResult.data?.token
+
+                appEmailPutSrv.invoke(email!!)
+                appSchoolIdPutSrv.invoke(schooldId!!)
+                appStudentIdPutSrv.invoke(studentId!!)
+                appNamePutSrv.invoke(name!!)
+                token?.let { appTokenUpdateSrv(it) }
+                //appLoginUpdateSrv.invoke(password)
+                _userResponseLiveData.postValue(dtoResult)
+            }
+            is DTOResult.Error -> {
+                _userResponseLiveData.postValue(dtoResult)
+            }
+            is DTOResult.Loading -> {
+
+            }
+        }
+
+    }
+
+    private fun responseToSchool(response: Response<SchoolResponse>): School? {
+        var school: School? = null
+
+        if (response?.isSuccessful == true) {
+            val body = response.body()
+            if (body?.success == 0) {
+                school = body.school.let { it?.toDomain() }
+                if (school != null) {
+                    school.student = body.school?.student.let {
+                        it?.toDomain(school.id)
+                    }
+                    if (body.school?.student?.matriculates != null) {
+                        school?.student?.matriculates =
+                            body.school?.student?.matriculates?.map { matriculateSerialize ->
+                                matriculateSerialize.toDomain(
+                                    matriculateSerialize.enrolledCourses?.map { enrolledCourseSerialize ->
+                                        enrolledCourseSerialize.toDomain(
+                                            enrolledCourseSerialize.courses?.map { courseSerialize ->
+                                                courseSerialize.toDomain("PD")
+                                            }
+                                        )
+                                    }
+                                )
+                            }
+                    }
+
+                    if (body.school != null) {
+                        school.courses = body.school?.courses?.map {
+                            it.toDomain("PD")
+                        }!!
+                    }
+                }
+            } else {
+                throw APIDataNotSuccesFull("${body?.messages?.get(0)}")
+            }
+        } else {
+            throw APINotSuccesFull("Registro: No se pudo registrar intente más tarde ${response?.message()}")
+        }
+        return school
+
+    }
+
+    private fun handleResponse(response: Response<SchoolResponse>?): DTOResult<School> {
+        if (response != null) {
+            if (response.isSuccessful && response?.body() != null) {
+                if (response.body()!!.success != 0) {
+                    //_userResponseLiveData.postValue(
+                    return DTOResult.Error("${response.body()!!.messages?.get(0)}")
+                    //)
+                } else {
+                    //_userResponseLiveData.postValue(
+                    return DTOResult.Success(responseToSchool(response)!!)
+                    //)
+                }
+            } else if (response.errorBody() != null) {
+                val errorObj = JSONObject(response.errorBody()!!.charStream().readText())
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error(errorObj.getString("message"))
+                //)
+            } else {
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error("Something Went Wrong")
+                //)
+            }
+        }
+        return DTOResult.Error("Sin retorno de información desde el servidor")
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenGetSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenGetSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenGetSrv.kt
new file mode 100644
--- /dev/null	(date 1695760841000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenGetSrv.kt	(date 1695760841000)
@@ -0,0 +1,17 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.utils.exception.ModelTokenNotFound
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppTokenGetSrv @Inject constructor(
+    private val appParameterFindSrv: AppParameterFindSrv
+) {
+    suspend operator fun invoke(): String {
+        val parameter = appParameterFindSrv.invoke(User.TOKEN)
+        if (!parameter.exists) {
+            throw ModelTokenNotFound("Debe volver a realizar un Login")
+        }
+        return "Bearer ${parameter.valueString}"
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckVM.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckVM.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckVM.kt
new file mode 100644
--- /dev/null	(date 1695686139000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/sys/AppCheckVM.kt	(date 1695686139000)
@@ -0,0 +1,87 @@
+package cl.daracenad.elearning.exercises.ui.sys
+
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import cl.daracenad.elearning.exercises.domain.usecase.user.AppInfoLocalUC
+import cl.daracenad.elearning.exercises.domain.model.AppStatus
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import java.io.IOException
+import java.net.SocketTimeoutException
+import java.net.UnknownHostException
+import javax.inject.Inject
+
+@HiltViewModel
+class AppCheckVM @Inject constructor(
+    val appInfoLocalUC: AppInfoLocalUC
+) : ViewModel() {
+
+    private var _listAppStatus = MutableLiveData<List<AppStatus>?>()
+    val listAppStatus: MutableLiveData<List<AppStatus>?> get() = _listAppStatus
+
+    private var _loadingAppStatus = MutableLiveData<AppStatus>()
+    val loadingAppStatus: LiveData<AppStatus> get() = _loadingAppStatus
+
+
+    //Verifica si el usuario existe en la app
+
+    fun init() {
+        viewModelScope.launch(Dispatchers.IO) {
+            /*
+            val appStatus=  AppStatus(APIConst.GO_LOGIN, "Solicitar registar")
+            insert(appStatus)
+            _loadingAppStatus.postValue(appStatus)
+
+             */
+
+            try {
+                var appStatus = appInfoLocalUC.invoke()
+
+                insert(appStatus)
+                _loadingAppStatus.postValue(appStatus)
+            } catch (e: IOException) {
+                val appStatus = AppStatus(666, "${e.message}")
+                insert(appStatus)
+                _loadingAppStatus.postValue(appStatus)
+            } catch (e: UnknownHostException) {
+                val appStatus = AppStatus(666, "${e.message}")
+                insert(appStatus)
+                _loadingAppStatus.postValue(appStatus)
+            } catch (e: SocketTimeoutException) {
+                val appStatus = AppStatus(666, "${e.message}")
+                insert(appStatus)
+                _loadingAppStatus.postValue(appStatus)
+            } catch (e: Exception) {
+                val appStatus = AppStatus(666, "${e.message}")
+                insert(appStatus)
+                _loadingAppStatus.postValue(appStatus)
+            }
+
+        }
+    }
+
+    private fun insert(entity: AppStatus) {
+
+        /*
+                val _list = _listAppStatus.value!! + entity
+        _listAppStatus.postValue(_list)
+
+         */
+        var list = _listAppStatus.value
+
+        if (list != null) {
+            list = list + entity
+            //_listAppStatus.postValue(listOf(entity))
+            _listAppStatus.postValue(list)
+        } else {
+            _listAppStatus.postValue(listOf(entity))
+        }
+
+
+    }
+
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/user/AppInfoLocalUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/user/AppInfoLocalUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/user/AppInfoLocalUC.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/user/AppInfoLocalUC.kt	(date 1695760839000)
@@ -0,0 +1,54 @@
+package cl.daracenad.elearning.exercises.domain.usecase.user
+
+
+import cl.daracenad.elearning.exercises.data.RepositorySchoolDB
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_DOWNLOAD_COURSE
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_LOGIN
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.GO_MATRICULATE
+import cl.daracenad.elearning.exercises.domain.model.APIConst.Companion.OK
+
+import cl.daracenad.elearning.exercises.domain.model.AppStatus
+import cl.daracenad.elearning.exercises.domain.service.app.AppEmailGetSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppSchoolIdGetSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppStudentIdGetSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppTokenGetSrv
+import javax.inject.Inject
+
+/**
+ * Objetivo: Cheque si existe informacion de:
+ * email
+ * name
+ * schoolId
+ * token
+ *  en caso contrario devuelve una acción
+
+ */
+class AppInfoLocalUC @Inject constructor(
+    private val repositorySchoolDB: RepositorySchoolDB,
+    private val userSchoolIdGetUC: AppSchoolIdGetSrv,
+    private val appEmailGetUC: AppEmailGetSrv,
+    private val userStudentIdGetUC: AppStudentIdGetSrv,
+    private val userTokenGetUC: AppTokenGetSrv
+) {
+    suspend operator fun invoke(): AppStatus {
+
+        try {
+            userSchoolIdGetUC.invoke()
+            appEmailGetUC.invoke()
+            userStudentIdGetUC.invoke()
+            userTokenGetUC.invoke()
+        } catch (ex: Exception) {
+            return AppStatus(GO_LOGIN, "Solicitar registar")
+        }
+
+        if (!repositorySchoolDB.matriculateExists())
+            return AppStatus(GO_MATRICULATE, "Ir a Matricula de cursos")
+
+        if(repositorySchoolDB.isPendingInstallation())
+            return AppStatus(GO_DOWNLOAD_COURSE, "Ir a descargar Cursos")
+
+        return AppStatus(OK, "Todo en orden")
+
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ISchoolDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ISchoolDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ISchoolDAO.kt
new file mode 100644
--- /dev/null	(date 1695665080000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ISchoolDAO.kt	(date 1695665080000)
@@ -0,0 +1,35 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.SchoolEntity
+import cl.daracenad.elearning.exercises.domain.model.school.School
+
+@Dao
+interface ISchoolDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: SchoolEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<SchoolEntity>)
+
+    @Update
+    suspend fun update(vararg entity: SchoolEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: SchoolEntity)
+
+    @Query("SELECT * FROM " + SchoolEntity.TABLE_NAME)
+    fun all(): List<SchoolEntity>
+
+    @Query("SELECT * FROM " + SchoolEntity.TABLE_NAME + " where id = :id")
+    fun findSchoolForId(id:String): LiveData<SchoolEntity>
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateUC.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateUC.kt	(date 1695760840000)
@@ -0,0 +1,161 @@
+package cl.daracenad.elearning.exercises.domain.usecase.school
+
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.RepositorySchoolDB
+import cl.daracenad.elearning.exercises.data.network.ISchoolAPI
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.EnrolledCoursePost
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.model.school.toDomain
+
+import cl.daracenad.elearning.exercises.domain.service.app.AppTokenGetSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppStudentIdGetSrv
+import cl.daracenad.elearning.exercises.utils.exception.APIDataNotSuccesFull
+import cl.daracenad.elearning.exercises.utils.exception.APINotSuccesFull
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import org.json.JSONObject
+import retrofit2.Response
+import javax.inject.Inject
+
+class MatriculateUC @Inject constructor(
+    private val api: ISchoolAPI,
+    private val appTokenGetSrv: AppTokenGetSrv,
+    private val appStudentIdGetSrv: AppStudentIdGetSrv,
+    private val repositorySchoolDB: RepositorySchoolDB
+) {
+    private val _dtoResultLD = MutableLiveData<DTOResult<School>>()
+    val dtoResultLD: LiveData<DTOResult<School>>
+        get() = _dtoResultLD
+
+    suspend operator fun invoke(courseIds: List<String>) {
+        _dtoResultLD.postValue(DTOResult.Loading())
+
+        val token = appTokenGetSrv.invoke()
+        val studentId = appStudentIdGetSrv.invoke()
+        val response = api.matriculate(token, EnrolledCoursePost(studentId, courseIds))
+        val dtoResult = handleResponse(response)
+        when (dtoResult) {
+            is DTOResult.Success -> {
+                goRegisterDB(dtoResult.data)
+                _dtoResultLD.postValue(dtoResult)
+            }
+
+            is DTOResult.Error -> {
+                _dtoResultLD.postValue(dtoResult)
+            }
+
+            is DTOResult.Loading -> {
+
+            }
+        }
+    }
+
+    private suspend fun goRegisterDB(data: School?): DTOResult<School> {
+        try {
+            data?.let { school ->
+                school.student.let { student ->
+                    student?.matriculates?.forEach { matriculate ->
+                        repositorySchoolDB.matriculateInsert(
+                            school.id,
+                            school.student!!.id,
+                            matriculate,
+                            "PD"
+                        )
+                        matriculate.enrolledCourses?.forEach { enrolledCourse ->
+                            enrolledCourse.courses?.forEach { course ->
+                                repositorySchoolDB.courseInsert(school.id, course, "PD")
+
+                                repositorySchoolDB.enrolledInsert(
+                                    enrolledCourse,
+                                    school.student!!.id,
+                                    school.id,
+                                    course.id,
+                                    matriculate.id,
+                                    "PD"
+                                )
+                            }
+
+                        }
+
+                    }
+                }
+            }
+        } catch (ex: Exception) {
+            return DTOResult.Error("DB : ${ex.message}")
+        }
+        return DTOResult.Success(data!!)
+    }
+
+    private fun responseToSchool(response: Response<SchoolResponse>): School? {
+        val school: School?
+
+        if (response.isSuccessful) {
+            val body = response.body()
+            if (body?.success == 0) {
+                school = body.school.let { it?.toDomain() }
+                if (school != null) {
+                    school.student = body.school?.student.let {
+                        it?.toDomain(school.id)
+                    }
+                    if (body.school?.student?.matriculates != null) {
+                        school.student?.matriculates =
+                            body.school.student.matriculates?.map { matriculateSerialize ->
+                                matriculateSerialize.toDomain(
+                                    matriculateSerialize.enrolledCourses?.map { enrolledCourseSerialize ->
+                                        enrolledCourseSerialize.toDomain(
+                                            enrolledCourseSerialize.courses?.map { courseSerialize ->
+                                                courseSerialize.toDomain("PD")
+                                            }
+                                        )
+                                    }
+                                )
+                            }
+                    }
+
+                    if (body.school != null) {
+                        school.courses = body.school.courses?.map {
+                            it.toDomain("PD")
+                        }!!
+                    }
+                }
+            } else {
+                throw APIDataNotSuccesFull("${body?.messages?.get(0)}")
+            }
+        } else {
+            throw APINotSuccesFull("Registro: No se pudo registrar intente más tarde ${response.message()}")
+        }
+        return school
+
+    }
+
+    private fun handleResponse(response: Response<SchoolResponse>?): DTOResult<School> {
+        if (response != null) {
+            if (response.isSuccessful && response.body() != null) {
+                return if (response.body()!!.success != 0) {
+                    //_userResponseLiveData.postValue(
+                    DTOResult.Error("${response.body()!!.messages?.get(0)}")
+                    //)
+                } else {
+                    //_userResponseLiveData.postValue(
+                    DTOResult.Success(responseToSchool(response)!!)
+                    //)
+                }
+            } else if (response.errorBody() != null) {
+
+                val errorObj = JSONObject(response.errorBody()!!.charStream().readText())
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error(errorObj.getString("message"))
+                //)
+            } else {
+
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error("Something Went Wrong")
+                //)
+            }
+        }
+        return DTOResult.Error("Sin retorno de información desde el servidor")
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateValidateUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateValidateUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateValidateUC.kt
new file mode 100644
--- /dev/null	(date 1695645998000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/MatriculateValidateUC.kt	(date 1695645998000)
@@ -0,0 +1,19 @@
+package cl.daracenad.elearning.exercises.domain.usecase.school
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import javax.inject.Inject
+
+/**
+ *   Verifica si el alumno esta matriculado y
+ * si se descargo los cursos de dicha matricular
+ */
+class MatriculateValidateUC  @Inject constructor(
+    private val repositoryDB: RepositoryDB
+){
+
+    suspend operator fun invoke(){
+        //Verificar si esta matriculado
+        //repositoryDB.matriculateFindForId()
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolAPI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolAPI.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolAPI.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolAPI.kt	(date 1695386366000)
@@ -0,0 +1,97 @@
+package cl.daracenad.elearning.exercises.data
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.network.ISchoolAPI
+
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.EnrolledCoursePost
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.model.school.toDomain
+import cl.daracenad.elearning.exercises.utils.exception.APIDataNotSuccesFull
+import cl.daracenad.elearning.exercises.utils.exception.APINotSuccesFull
+import cl.daracenad.elearning.exercises.utils.http.NetworkResult
+import org.json.JSONObject
+import retrofit2.Response
+import javax.inject.Inject
+
+class RepositorySchoolAPI  @Inject constructor(
+    private val api: ISchoolAPI
+) {
+    private val _userResponseLiveData = MutableLiveData<NetworkResult<School>>()
+    val userResponseLiveData: LiveData<NetworkResult<School>>
+        get() = _userResponseLiveData
+    //ocupados
+
+    suspend fun coursesToEnrollAPI(token: String,studentId:String, ids:List<String>){//: School? {
+        val response =  api.matriculate(token, EnrolledCoursePost(studentId, ids))
+        handleResponse(response)
+        //return api.coursesToEnroll(token,studentId,ids)?.let { responseToSchool(it) }
+    }
+    private fun responseToSchool(response: Response<SchoolResponse>): School? {
+        var school: School?=null
+
+        if(response?.isSuccessful == true){
+            val body = response.body()
+            if(body?.success == 0){
+                school =  body.school.let { it?.toDomain() }
+                if (school != null) {
+                    school.student = body.school?.student.let {
+                        it?.toDomain(school.id)
+                    }
+                    if(body.school?.student?.matriculates!= null){
+                        school?.student?.matriculates  = body.school?.student?.matriculates?.map { matriculateSerialize->
+                            matriculateSerialize.toDomain(
+                                matriculateSerialize.enrolledCourses?.map {enrolledCourseSerialize ->
+                                    enrolledCourseSerialize.toDomain(
+                                        enrolledCourseSerialize.courses?.map { courseSerialize ->
+                                            courseSerialize.toDomain("PD")
+                                        }
+                                    )
+                                }
+                            )
+                        }
+                    }
+
+                    if(body.school != null){
+                        school.courses = body.school?.courses?.map {
+                            it.toDomain("PD")
+                        }!!
+                    }
+                }
+            }else{
+                throw APIDataNotSuccesFull("${body?.messages?.get(0)}")
+            }
+        }else{
+            throw APINotSuccesFull("Registro: No se pudo registrar intente más tarde ${response?.message()}")
+        }
+        return school
+
+    }
+
+    private fun handleResponse(response: Response<SchoolResponse>?) {
+        if (response != null) {
+            if (response.isSuccessful && response?.body() != null) {
+                if(response.body()!!.success != 0){
+                    _userResponseLiveData.postValue(
+                        NetworkResult.Error("${response.body()!!.messages?.get(0)}")
+                    )
+                }else {
+                    _userResponseLiveData.postValue(
+                        NetworkResult.Success(responseToSchool(response)!!)
+                    )
+                }
+            }
+            else if(response.errorBody()!=null){
+                val errorObj = JSONObject(response.errorBody()!!.charStream().readText())
+                _userResponseLiveData.postValue(
+                    NetworkResult.Error(errorObj.getString("message"))
+                )
+            }
+            else{
+                _userResponseLiveData.postValue(NetworkResult.Error("Something Went Wrong"))
+            }
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/DownloadTestAPI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/DownloadTestAPI.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/DownloadTestAPI.kt
new file mode 100644
--- /dev/null	(date 1694512967000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/DownloadTestAPI.kt	(date 1694512967000)
@@ -0,0 +1,40 @@
+package cl.daracenad.elearning.exercises.data
+
+import cl.daracenad.elearning.exercises.data.network.APIClient
+import cl.daracenad.elearning.exercises.data.network.ReturnResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.CourseResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.AnswerResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.QuestionResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TestTemplateResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TopicResponse
+import javax.inject.Inject
+
+class DownloadTestAPI  @Inject constructor(
+    private val api: APIClient,
+) {
+    suspend fun downloadAnswersFromAPI(token: String, schoolId:String, version:Int): AnswerResponse? {
+        val response = api.downloadTableAnswers(token, schoolId, version)
+        return response
+    }
+    suspend fun downloadCoursesFromAPI(token: String, schoolId:String, version:Int): CourseResponse? {
+        val response = api.downloadTableCurses(token, schoolId, version)
+        return response
+    }
+    suspend fun downloadTestTemplatesFromAPI(token: String, schoolId:String,version:Int): TestTemplateResponse? {
+        val response = api.downloadTableTestTemplates(token, schoolId, version)
+        return response
+    }
+    suspend fun downloadTopicsFromAPI(token: String, schoolId:String, version:Int): TopicResponse? {
+        val response = api.downloadTableTopics(token, schoolId, version)
+        return response
+    }
+    suspend fun downloadQuestionsFromAPI(token: String, schoolId:String, version:Int): QuestionResponse? {
+        val response = api.downloadTableQuestions(token, schoolId, version)
+        return response
+    }
+    suspend fun profileUpdate(token: String, name:String): ReturnResponse? {
+        val response = api.profileUpdate(token, name)
+        return response
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/TopicViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/TopicViewModel.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/TopicViewModel.kt
new file mode 100644
--- /dev/null	(date 1695646603000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/TopicViewModel.kt	(date 1695646603000)
@@ -0,0 +1,35 @@
+package cl.daracenad.elearning.exercises.ui.viewmodel
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.asLiveData
+import androidx.lifecycle.viewModelScope
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.data.database.entities.TopicEntity
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class TopicViewModel @Inject constructor(
+    private val repository: RepositoryDB
+) : ViewModel() {
+    val readData = repository.parameterAll().asLiveData()
+
+    fun start(){
+        //Verficar si el usario existe en local
+
+    }
+    fun searchDatabase(): LiveData<List<AppParameterEntity>> {
+        return repository.parameterAll().asLiveData()
+    }
+
+
+    fun insertData(entity: AppParameterEntity){
+        viewModelScope.launch(Dispatchers.IO) {
+            repository.parameterInsertFormDB(entity)
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppLoginUpdateSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppLoginUpdateSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppLoginUpdateSrv.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppLoginUpdateSrv.kt	(date 1695760840000)
@@ -0,0 +1,14 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppLoginUpdateSrv  @Inject constructor(
+    private val repository: RepositoryDB
+)  {
+    suspend operator fun invoke(password:String){
+        repository.parameterInsertFormDB(AppParameterEntity(User.PASSWORD,password, 0, null))
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/RegisterUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/RegisterUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/RegisterUC.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/profile/RegisterUC.kt	(date 1695760840000)
@@ -0,0 +1,148 @@
+package cl.daracenad.elearning.exercises.domain.usecase.profile
+
+
+import android.util.Log
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.RepositorySchoolDB
+import cl.daracenad.elearning.exercises.data.network.IUserAPI
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.model.school.toDomain
+import cl.daracenad.elearning.exercises.domain.service.app.AppEmailPutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppNamePutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppSchoolIdPutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppStudentIdPutSrv
+import cl.daracenad.elearning.exercises.domain.service.app.AppTokenUpdateSrv
+import cl.daracenad.elearning.exercises.utils.exception.APIDataNotSuccesFull
+import cl.daracenad.elearning.exercises.utils.exception.APINotSuccesFull
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import org.json.JSONObject
+import retrofit2.Response
+import javax.inject.Inject
+
+class RegisterUC@Inject constructor(
+    private val api: IUserAPI,
+    private val appEmailPutSrv: AppEmailPutSrv,
+    private val appSchoolIdPutSrv: AppSchoolIdPutSrv,
+    private val appStudentIdPutSrv: AppStudentIdPutSrv,
+    private val appNamePutSrv: AppNamePutSrv,
+    private val appTokenUpdateSrv: AppTokenUpdateSrv,
+    private val repositorySchoolDB: RepositorySchoolDB
+)
+{
+    private val _userResponseLiveData = MutableLiveData<DTOResult<School>>()
+    val userResponseLiveData: LiveData<DTOResult<School>>
+        get() = _userResponseLiveData
+
+    suspend operator fun invoke(email:String, name: String, password: String, passwordConfirm:String) {
+        _userResponseLiveData.postValue(DTOResult.Loading())
+
+        val response = api.registerPOST(name,email,password, passwordConfirm)
+
+        when (val rtnLogin = handleResponse(response)) {
+            is DTOResult.Success -> {
+                val school = rtnLogin.data
+                val student = school?.student
+
+                school?.let {
+                    appTokenUpdateSrv(it.token!!)
+                    appSchoolIdPutSrv.invoke(it.id!!)
+                }
+                student?.id?.let { appStudentIdPutSrv.invoke(it) }
+                student?.id?.let { appEmailPutSrv.invoke(it) }
+                student?.email?.let { appEmailPutSrv.invoke(it) }
+                //Se debe registrar el estudiante
+                if (student != null) {
+                    try {
+                        repositorySchoolDB.schoolInsertFromDB(school)
+                        repositorySchoolDB.studentInsert(student)
+                        _userResponseLiveData.postValue(rtnLogin)
+                    }catch(ex:Exception){
+                        Log.e("msgdad error db","${ex.message}")
+                        _userResponseLiveData.postValue(
+                            DTOResult.Error("DB : ${ex.message}")
+                        )
+                    }
+                }
+            }
+            is DTOResult.Error -> {
+                _userResponseLiveData.postValue(rtnLogin)
+            }
+            is DTOResult.Loading -> {
+
+            }
+        }
+
+    }
+
+    private fun responseToSchool(response: Response<SchoolResponse>): School? {
+        val school: School?
+
+        if (response.isSuccessful) {
+            val body = response.body()
+            if (body?.success == 0) {
+                school = body.school.let { it?.toDomain() }
+                if (school != null) {
+                    school.student = body.school?.student.let {
+                        it?.toDomain(school.id)
+                    }
+                    if (body.school?.student?.matriculates != null) {
+                        school.student?.matriculates =
+                            body.school.student?.matriculates?.map { matriculateSerialize ->
+                                matriculateSerialize.toDomain(
+                                    matriculateSerialize.enrolledCourses?.map { enrolledCourseSerialize ->
+                                        enrolledCourseSerialize.toDomain(
+                                            enrolledCourseSerialize.courses?.map { courseSerialize ->
+                                                courseSerialize.toDomain("PD")
+                                            }
+                                        )
+                                    }
+                                )
+                            }
+                    }
+
+                    if (body.school != null) {
+                        school.courses = body.school?.courses?.map {
+                            it.toDomain("PD")
+                        }!!
+                    }
+                }
+            } else {
+                throw APIDataNotSuccesFull("${body?.messages?.get(0)}")
+            }
+        } else {
+            throw APINotSuccesFull("Registro: No se pudo registrar intente más tarde ${response?.message()}")
+        }
+        return school
+
+    }
+
+    private fun handleResponse(response: Response<SchoolResponse>?): DTOResult<School> {
+        if (response != null) {
+            if (response.isSuccessful && response?.body() != null) {
+                if (response.body()!!.success != 0) {
+                    //_userResponseLiveData.postValue(
+                    return DTOResult.Error("${response.body()!!.messages?.get(0)}")
+                    //)
+                } else {
+                    //_userResponseLiveData.postValue(
+                    return DTOResult.Success(responseToSchool(response)!!)
+                    //)
+                }
+            } else if (response.errorBody() != null) {
+                val errorObj = JSONObject(response.errorBody()!!.charStream().readText())
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error(errorObj.getString("message"))
+                //)
+            } else {
+                //_userResponseLiveData.postValue(
+                return DTOResult.Error("Something Went Wrong")
+                //)
+            }
+        }
+        return DTOResult.Error("Sin retorno de información desde el servidor")
+    }
+
+}
+
Index: app/src/main/res/layout/activity_matriculate.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_matriculate.xml b/app/src/main/res/layout/activity_matriculate.xml
new file mode 100644
--- /dev/null	(date 1695652891000)
+++ b/app/src/main/res/layout/activity_matriculate.xml	(date 1695652891000)
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".ui.school.MatriculateActivity">
+
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/textView"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Bienvenido" />
+
+        <TextView
+            android:id="@+id/tvNombre"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="TextView" />
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/rvCourses"
+            android:layout_width="match_parent"
+            android:layout_height="400dp"
+            tools:listitem="@layout/card_course" >
+
+        </androidx.recyclerview.widget.RecyclerView>
+
+        <Button
+            android:id="@+id/btnMatricularse"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="20dp"
+            android:layout_marginLeft="25dp"
+            android:layout_marginRight="25dp"
+
+            android:onClick="btnEnrolled"
+            android:text="Matricularse" />
+
+        <TextView
+            android:id="@+id/tvMessage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="8dp"
+            android:layout_marginTop="25dp"
+            android:textSize="20sp"
+            app:layout_constraintTop_toTopOf="parent" />
+
+    </LinearLayout>
+    <ProgressBar
+        android:id="@+id/matriculateProgressBar"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="invisible"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IStudentDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IStudentDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IStudentDAO.kt
new file mode 100644
--- /dev/null	(date 1695665200000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IStudentDAO.kt	(date 1695665200000)
@@ -0,0 +1,37 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.StudentEntity
+import org.jetbrains.annotations.NotNull
+
+@Dao
+interface IStudentDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: StudentEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: StudentEntity)
+
+    @Update
+    suspend fun update(vararg entity: StudentEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: StudentEntity)
+
+    @Query("SELECT * FROM ${StudentEntity.TABLE_NAME}" )
+    fun all(): LiveData<List<StudentEntity>>
+
+
+    @Query("select * from ${StudentEntity.TABLE_NAME} where id=:id" )
+    fun findForId(@NotNull id:String): StudentEntity
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IMatriculateDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IMatriculateDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IMatriculateDAO.kt
new file mode 100644
--- /dev/null	(date 1695686721000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IMatriculateDAO.kt	(date 1695686721000)
@@ -0,0 +1,38 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+
+import cl.daracenad.elearning.exercises.data.database.entities.MatriculateEntity
+
+@Dao
+interface IMatriculateDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: MatriculateEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<MatriculateEntity>)
+
+    @Update
+    suspend fun update(vararg entity: MatriculateEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: MatriculateEntity)
+
+    @Query("SELECT * FROM " + MatriculateEntity.TABLE_NAME)
+    fun all(): List<MatriculateEntity>
+
+    @Query(value = "select exists(select * from  ${MatriculateEntity.TABLE_NAME})")
+    fun exists(): Boolean
+
+    @Query("select * from  ${MatriculateEntity.TABLE_NAME} where id  = :id" )
+    fun findId(id: String ): LiveData<MatriculateEntity>
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateVM.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateVM.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateVM.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateVM.kt	(date 1695760839000)
@@ -0,0 +1,97 @@
+package cl.daracenad.elearning.exercises.ui.school
+
+import android.util.Log
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import cl.daracenad.elearning.exercises.data.RepositorySchoolDB
+import cl.daracenad.elearning.exercises.domain.UserProfileUC
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.service.app.AppStudentIdGetSrv
+import cl.daracenad.elearning.exercises.domain.usecase.school.MatriculateUC
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.CoroutineExceptionHandler
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class MatriculateVM @Inject constructor(
+    private val userProfileUC: UserProfileUC, //obtiene el perfil
+    private val matriculateUC: MatriculateUC, //matricula
+    private val appStudentIdGetSrv: AppStudentIdGetSrv,
+    private val repositorySchoolDB: RepositorySchoolDB
+) : ViewModel() {
+
+    val exceptionHandler = CoroutineExceptionHandler { _, throwable ->
+        message.postValue("error de comunicación")
+    }
+    val matriculateLD: LiveData<DTOResult<School>>
+        get() = matriculateUC.dtoResultLD
+
+    val profileLD: LiveData<DTOResult<School>>
+        get() = userProfileUC.dtoResultLD
+
+    val message = MutableLiveData<String>()
+
+    private var _listCoursesSelected = MutableLiveData<List<CourseSelected>?>()
+    val lstCoursesSelected: MutableLiveData<List<CourseSelected>?> get() = _listCoursesSelected
+
+// para borrar
+
+
+
+    // para borrar
+    init {
+        viewModelScope.launch(Dispatchers.IO + exceptionHandler) {
+            userProfileUC.invoke()
+        }
+    }
+
+    //solicitud de carga de curso desde la activity
+    fun loadCourses(school: School) {
+        var coll: List<CourseSelected> = emptyList()
+        if (school != null)
+            school?.courses?.forEach { course ->
+
+                coll += CourseSelected(course, false)
+
+            }
+        lstCoursesSelected.postValue(coll)
+    }
+
+    fun goMatriculate() {
+        viewModelScope.launch(Dispatchers.IO) {
+            var id: List<String> = emptyList()
+            lstCoursesSelected.value?.forEach {
+                if (it.selected) {
+                    id += it.course.id
+                }
+            }
+
+            if (id.size > 0)
+                matriculateUC.invoke(id)
+            else
+                Log.e("MatriculateVM", "no se encontro seleccionados")
+        }
+
+
+    }
+
+
+    fun modifyCoursesSelected(courseSelected: CourseSelected, checked: Boolean) {
+        Log.e("dadmsg","modifyCoursesSelected")
+    if(checked){
+        courseSelected.id = courseSelected.id?.toMutableList()?.apply {
+            removeAt(0)
+        }?.toList().toString()
+    }
+
+    }
+
+
+}
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolDB.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolDB.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolDB.kt
new file mode 100644
--- /dev/null	(date 1695739778000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositorySchoolDB.kt	(date 1695739778000)
@@ -0,0 +1,106 @@
+package cl.daracenad.elearning.exercises.data
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.database.dao.ICourseDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IEnrolledCourseDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IMatriculateDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ISchoolDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IStudentDAO
+import cl.daracenad.elearning.exercises.data.database.entities.CourseEntity
+import cl.daracenad.elearning.exercises.data.database.entities.EnrolledCourseEntity
+import cl.daracenad.elearning.exercises.data.database.entities.MatriculateEntity
+import cl.daracenad.elearning.exercises.data.database.entities.SchoolEntity
+import cl.daracenad.elearning.exercises.data.database.entities.StudentEntity
+import cl.daracenad.elearning.exercises.domain.model.school.Course
+import cl.daracenad.elearning.exercises.domain.model.school.EnrolledCourse
+import cl.daracenad.elearning.exercises.domain.model.school.Matriculate
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.model.school.Student
+import cl.daracenad.elearning.exercises.domain.model.school.toDomain
+import cl.daracenad.elearning.exercises.domain.model.school.toEntity
+import cl.daracenad.elearning.exercises.utils.db.DataBaseResult
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import javax.inject.Inject
+
+class RepositorySchoolDB @Inject constructor(
+    private val schoolDAO: ISchoolDAO,
+    private val studentDAO: IStudentDAO,
+    private val matriculateDAO: IMatriculateDAO,
+    private val courseDAO: ICourseDAO,
+    private val enrolledCourseDAO: IEnrolledCourseDAO
+) {
+
+    suspend fun schoolInsertFromDB(school: School){
+        val schoolEntity = school.toEntity()
+        schoolDAO.insert(schoolEntity)
+    }
+
+    fun schoolAll(): List<SchoolEntity> {
+        return schoolDAO.all()
+    }
+
+    suspend fun studentInsert(student: Student){
+        val studentEntity = student.toEntity()
+        studentDAO.insert(studentEntity)
+    }
+
+    suspend fun courseInsert(schoolId:String, course: Course, status:String){
+        val entity = course.toEntity(schoolId, status)
+        courseDAO.insert(entity)
+    }
+
+    fun coursesPendingInstallation(): List<Course> {
+        val entities =  courseDAO.pendingInstallation()
+        var domain : List<Course> = emptyList()
+        entities.forEach{
+            domain += it.toDomain()
+        }
+        return domain
+
+    }
+
+    fun isPendingInstallation(): Boolean {
+        return courseDAO.isPendingInstallation()
+    }
+
+    fun courseAll(): List<CourseEntity> {
+        return courseDAO.all()
+    }
+
+    suspend fun matriculateInsert(schoolId:String, studentId:String,matriculate:Matriculate,status:String){
+        val entity = matriculate.toEntity(schoolId, studentId,status)
+        matriculateDAO.insert(entity)
+    }
+
+    suspend fun enrolledInsert(enrolledCourse: EnrolledCourse,studentId:String, schoolId:String, courseId:String, matriculateId:String,status:String){
+        val entity = enrolledCourse.toEntity(studentId, schoolId, courseId, matriculateId,status)
+        enrolledCourseDAO.insert(entity)
+    }
+
+    fun enrolledAll(): List<EnrolledCourseEntity> {
+        return enrolledCourseDAO.all()
+    }
+
+    fun studentFindForId(id:String): StudentEntity {
+        return studentDAO.findForId(id)
+    }
+    fun studentAll(): LiveData<List<StudentEntity>> {
+        return studentDAO.all()
+    }
+
+    fun matriculateFindForId(id:String): LiveData<MatriculateEntity> {
+        return matriculateDAO.findId(id)
+    }
+
+    fun matriculateExists(): Boolean {
+        return matriculateDAO.exists()
+    }
+
+    fun matriculateAll(): List<MatriculateEntity> {
+        return matriculateDAO.all()
+    }
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryDB.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryDB.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryDB.kt
new file mode 100644
--- /dev/null	(date 1695647237000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryDB.kt	(date 1695647237000)
@@ -0,0 +1,99 @@
+package cl.daracenad.elearning.exercises.data
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.database.dao.IAnswerDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ICourseDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IDownloadTableDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IMatriculateDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IParameterDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IQuestionDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ISchoolDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IStudentDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ITestTemplateDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ITopicDAO
+import cl.daracenad.elearning.exercises.data.database.entities.AnswerEntity
+import cl.daracenad.elearning.exercises.data.database.entities.DownloadTableEntity
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.data.database.entities.CourseEntity
+import cl.daracenad.elearning.exercises.data.database.entities.MatriculateEntity
+import cl.daracenad.elearning.exercises.data.database.entities.QuestionEntity
+import cl.daracenad.elearning.exercises.data.database.entities.SchoolEntity
+import cl.daracenad.elearning.exercises.data.database.entities.StudentEntity
+import cl.daracenad.elearning.exercises.data.database.entities.TestTemplateEntity
+import cl.daracenad.elearning.exercises.data.database.entities.TopicEntity
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.utils.db.DataBaseResult
+import cl.daracenad.elearning.exercises.utils.http.NetworkResult
+import kotlinx.coroutines.flow.Flow
+import javax.inject.Inject
+
+class RepositoryDB @Inject constructor(
+    private val answerDAO:IAnswerDAO,
+    private val courseDAO: ICourseDAO,
+    private val testTemplateDAO:ITestTemplateDAO,
+    private val topicDAO:ITopicDAO,
+
+    private val questionDAO: IQuestionDAO,
+    private val parameterDAO:IParameterDAO,
+
+    private val downloadTableDAO: IDownloadTableDAO
+    ){
+    private val _userResponseLiveData = MutableLiveData<DataBaseResult<School>>()
+    val userResponseLiveData: LiveData<DataBaseResult<School>>
+        get() = _userResponseLiveData
+
+
+    /**
+     * Descargar de tablas
+     */
+    suspend fun downloadTablesInsertFromDB(entities:List<DownloadTableEntity>){
+        downloadTableDAO.insertAll(entities)
+    }
+
+  //grabar tablas
+    suspend fun answerInsertListFromDB(answerEntities: List<AnswerEntity>){
+      answerDAO.insertAll(answerEntities)
+    }
+    suspend fun answerAllFromDB(): List<AnswerEntity>? {
+        return answerDAO.all()
+    }
+
+    suspend fun courseInsertListFromDB(entities: List<CourseEntity>){
+        courseDAO.insertAll(entities)
+    }
+
+    suspend fun testTemplateInsertListFromDB(entities: List<TestTemplateEntity>){
+        testTemplateDAO.insertAll(entities)
+    }
+
+    suspend fun topicInsertListFromDB(entities: List<TopicEntity>){
+        topicDAO.insertAll(entities)
+    }
+
+    fun topicFromDBAll(): Flow<List<TopicEntity>> {
+        return topicDAO.all()
+    }
+
+    suspend fun questionInsertListFromDB(entities: List<QuestionEntity>){
+        questionDAO.insertAll(entities)
+    }
+
+    suspend fun parameterFindKeyFromDB(key:String):AppParameterEntity{
+        return parameterDAO.findForKey(key)
+    }
+
+    suspend fun parameterInsertFormDB(entity:AppParameterEntity) {
+        return parameterDAO.insert(entity)
+    }
+
+    suspend fun parameterUpdateFormDB(entity:AppParameterEntity) {
+        return parameterDAO.update(entity)
+    }
+
+    fun parameterAll(): Flow<List<AppParameterEntity>>{
+        return parameterDAO.all()
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationActivity.kt
new file mode 100644
--- /dev/null	(date 1695757440000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationActivity.kt	(date 1695757440000)
@@ -0,0 +1,72 @@
+package cl.daracenad.elearning.exercises.ui.school.download
+
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.widget.Toast
+import androidx.activity.viewModels
+import androidx.core.view.isVisible
+import androidx.recyclerview.widget.LinearLayoutManager
+import cl.daracenad.elearning.exercises.databinding.ActivityCoursesForInstallationBinding
+import cl.daracenad.elearning.exercises.ui.school.download.adapter.CoursesForInstallationAdapter
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.AndroidEntryPoint
+
+@AndroidEntryPoint
+class CoursesForInstallationActivity : AppCompatActivity() {
+    private lateinit var _binding: ActivityCoursesForInstallationBinding
+    private val viewmodel: CoursesForInstallationVM by viewModels()
+    lateinit var availableCourseAdapter: CoursesForInstallationAdapter
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        _binding = ActivityCoursesForInstallationBinding.inflate(layoutInflater)
+        setContentView(_binding.root)
+
+        availableCourseAdapter = CoursesForInstallationAdapter(
+            emptyList<CourseSelected>(),
+            { course, isChecked -> onClickListener(course, isChecked) })
+        _binding.rvCourses.apply {
+            layoutManager = LinearLayoutManager(this@CoursesForInstallationActivity)
+            adapter = availableCourseAdapter
+        }
+
+        bindObservers()
+    }
+
+    private fun bindObservers() {
+
+        viewmodel.lstCoursesSelected.observe(this) {
+            if (it != null) {
+                availableCourseAdapter.lstCourses = it
+                availableCourseAdapter.notifyDataSetChanged()
+            }
+        }
+
+        viewmodel.coursesForIntallLD.observe(this) {
+            _binding.loading.isVisible = false
+            when (it) {
+                is DTOResult.Success -> {
+                    it.data.let { data -> viewmodel.loadCourses(data!!) }
+                }
+
+                is DTOResult.Error -> {
+                    _binding.tvMessage.text = it.message
+                }
+
+                is DTOResult.Loading -> {
+
+                    _binding.loading.isVisible = true
+                }
+            }
+        }
+
+    }
+
+    fun onClickListener(courseSelected: CourseSelected, isChecked: Boolean) {
+        //viewmodel.modifyCoursesSelected(courseSelected, isChecked)
+        Toast.makeText(this@CoursesForInstallationActivity,"click curso ${courseSelected.course.name} ${isChecked}", Toast.LENGTH_LONG).show()
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/ExerciseDB.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/ExerciseDB.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/ExerciseDB.kt
new file mode 100644
--- /dev/null	(date 1694652890000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/ExerciseDB.kt	(date 1694652890000)
@@ -0,0 +1,53 @@
+package cl.daracenad.elearning.exercises.data.database
+
+import androidx.room.Database
+import androidx.room.RoomDatabase
+import cl.daracenad.elearning.exercises.data.database.dao.IAnswerDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ICourseDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IDownloadTableDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IEnrolledCourseDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IMatriculateDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IParameterDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IQuestionDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ISchoolDAO
+import cl.daracenad.elearning.exercises.data.database.dao.IStudentDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ITestTemplateDAO
+import cl.daracenad.elearning.exercises.data.database.dao.ITopicDAO
+import cl.daracenad.elearning.exercises.data.database.entities.AnswerEntity
+import cl.daracenad.elearning.exercises.data.database.entities.CourseEntity
+import cl.daracenad.elearning.exercises.data.database.entities.DownloadTableEntity
+import cl.daracenad.elearning.exercises.data.database.entities.EnrolledCourseEntity
+import cl.daracenad.elearning.exercises.data.database.entities.MatriculateEntity
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.data.database.entities.QuestionEntity
+import cl.daracenad.elearning.exercises.data.database.entities.SchoolEntity
+import cl.daracenad.elearning.exercises.data.database.entities.StudentEntity
+import cl.daracenad.elearning.exercises.data.database.entities.TestTemplateEntity
+import cl.daracenad.elearning.exercises.data.database.entities.TopicEntity
+
+@Database(entities = [
+    AnswerEntity::class,
+    CourseEntity::class,
+    DownloadTableEntity::class,
+    EnrolledCourseEntity::class,
+    MatriculateEntity::class,
+    AppParameterEntity::class,
+    QuestionEntity::class,
+    SchoolEntity::class,
+    StudentEntity::class,
+    TestTemplateEntity::class,
+    TopicEntity::class
+], version = 8)
+abstract class ExerciseDB:RoomDatabase() {
+    abstract fun answerDAO(): IAnswerDAO
+    abstract fun courseDAO(): ICourseDAO
+    abstract fun downloadTableDAO(): IDownloadTableDAO
+    abstract fun enrolledCourseDAO(): IEnrolledCourseDAO
+    abstract fun matriculateDAO(): IMatriculateDAO
+    abstract fun parameterDAO(): IParameterDAO
+    abstract fun questionDAO(): IQuestionDAO
+    abstract fun schoolDAO(): ISchoolDAO
+    abstract fun studentDAO(): IStudentDAO
+    abstract fun testTemplateDAO(): ITestTemplateDAO
+    abstract fun topicDAO(): ITopicDAO
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_courses_for_installation.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_courses_for_installation.xml b/app/src/main/res/layout/activity_courses_for_installation.xml
new file mode 100644
--- /dev/null	(date 1695758294000)
+++ b/app/src/main/res/layout/activity_courses_for_installation.xml	(date 1695758294000)
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".ui.school.download.CoursesForInstallationActivity">
+
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/textView"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="25dp"
+            android:text="Aun paso, descargue los cursos habilitados" />
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/rvCourses"
+            android:layout_width="match_parent"
+            android:layout_height="400dp"
+            tools:listitem="@layout/card_coures_download" >
+
+        </androidx.recyclerview.widget.RecyclerView>
+
+        <TextView
+            android:id="@+id/tvMessage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="8dp"
+            android:layout_marginTop="25dp"
+            android:textSize="20sp"
+            app:layout_constraintTop_toTopOf="parent" />
+
+    </LinearLayout>
+    <ProgressBar
+        android:id="@+id/loading"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="invisible"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryUserAPI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryUserAPI.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryUserAPI.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/RepositoryUserAPI.kt	(date 1695386366000)
@@ -0,0 +1,118 @@
+package cl.daracenad.elearning.exercises.data
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.network.IUserAPI
+import cl.daracenad.elearning.exercises.utils.exception.APIDataNotSuccesFull
+import cl.daracenad.elearning.exercises.utils.exception.APINotSuccesFull
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.EnrolledCoursePost
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.domain.model.school.toDomain
+import cl.daracenad.elearning.exercises.utils.http.NetworkResult
+import org.json.JSONObject
+import retrofit2.Response
+import javax.inject.Inject
+
+class RepositoryUserAPI  @Inject constructor(
+    private val api: IUserAPI
+) {
+    private val _userResponseLiveData = MutableLiveData<NetworkResult<School>>()
+    val userResponseLiveData: LiveData<NetworkResult<School>>
+        get() = _userResponseLiveData
+    //ocupados
+    //private val userDAO:IUserDAO
+    suspend fun loginFromAPI(user:String, password:String){//: School? {
+
+        _userResponseLiveData.postValue(NetworkResult.Loading())
+
+
+        val response =  api.loginPOST(user, password)
+
+
+        handleResponse(response)
+        //return api.loginFromAPI(user, password)?.let { responseToSchool(it) }
+    }
+    suspend fun profileGetFromAPI(token: String,studentId:String){//: School? {
+
+        val response =  api.userProfileGET(token,studentId)
+        handleResponse(response)
+        //return api.profileGET(token,studentId)?.let { responseToSchool(it) }
+    }
+    suspend fun registerFromAPI(name: String, email:String, password:String, password_confirmation:String){//: School? {
+        val response =  api.registerPOST(name,email, password, password_confirmation)
+        handleResponse(response)
+        //return api.register(name,email, password, password_confirmation)?.let { responseToSchool(it) }
+    }
+
+    private fun responseToSchool(response: Response<SchoolResponse>): School? {
+        var school: School?=null
+
+        if(response?.isSuccessful == true){
+            val body = response.body()
+
+            if(body?.success == 0){
+                school =  body.school.let { it?.toDomain() }
+                if (school != null) {
+                    school.student = body.school?.student.let {
+                        it?.toDomain(school.id)
+                    }
+                    if(body.school?.student?.matriculates!= null){
+                        school?.student?.matriculates  = body.school?.student?.matriculates?.map { matriculateSerialize->
+                            matriculateSerialize.toDomain(
+                                matriculateSerialize.enrolledCourses?.map {enrolledCourseSerialize ->
+                                    enrolledCourseSerialize.toDomain(
+                                        enrolledCourseSerialize.courses?.map { courseSerialize ->
+                                            courseSerialize.toDomain("PD")
+                                        }
+                                    )
+                                }
+                            )
+                        }
+                    }
+
+                    if(body.school != null){
+                        school.courses = body.school?.courses?.map {
+                            it.toDomain("PD")
+                        }!!
+                    }
+                }
+            }else{
+                throw APIDataNotSuccesFull("${body?.messages?.get(0)}")
+            }
+        }else{
+            throw APINotSuccesFull("Registro: No se pudo registrar intente más tarde ${response?.message()}")
+        }
+        return school
+
+    }
+
+    private fun handleResponse(response: Response<SchoolResponse>?) {
+        if (response != null) {
+            if (response.isSuccessful && response?.body() != null) {
+
+                if(response.body()!!.success != 0){
+                    _userResponseLiveData.postValue(
+                        NetworkResult.Error("${response.body()!!.messages?.get(0)}")
+                        )
+                }else {
+                    _userResponseLiveData.postValue(
+                        NetworkResult.Success(responseToSchool(response)!!)
+                    )
+                }
+            }
+            else if(response.errorBody()!=null){
+
+                val errorObj = JSONObject(response.errorBody()!!.charStream().readText())
+                _userResponseLiveData.postValue(
+                    NetworkResult.Error(errorObj.getString("message"))
+                )
+            }
+            else{
+
+                _userResponseLiveData.postValue(NetworkResult.Error("Something Went Wrong"))
+            }
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1695738270000)
+++ b/app/src/main/AndroidManifest.xml	(date 1695738270000)
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+
+    <application
+        android:name=".ExerciseApp"
+        android:allowBackup="true"
+        android:dataExtractionRules="@xml/data_extraction_rules"
+        android:fullBackupContent="@xml/backup_rules"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/Theme.Exercises"
+        tools:targetApi="31">
+        <activity
+            android:name=".ui.school.download.CoursesForInstallationActivity"
+            android:exported="false" />
+        <activity
+            android:name=".ui.ProfileActivity"
+            android:exported="false" />
+        <activity
+            android:name=".ui.school.MatriculateActivity"
+            android:exported="false" />
+        <activity
+            android:name=".ui.sys.AppCheckActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name=".ui.TopicActivity"
+            android:exported="true" />
+        <activity
+            android:name=".ui.profile.RegisterActivity"
+            android:exported="false" />
+        <activity
+            android:name=".ui.profile.LoginActivity"
+            android:exported="false"
+            android:launchMode="singleInstance"
+            android:theme="@style/Theme.Exercises" />
+        <activity
+            android:name=".ui.MainActivity"
+            android:exported="false"
+            android:label="@string/app_name" />
+    </application>
+
+</manifest>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateActivity.kt
new file mode 100644
--- /dev/null	(date 1695666509000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/MatriculateActivity.kt	(date 1695666509000)
@@ -0,0 +1,97 @@
+package cl.daracenad.elearning.exercises.ui.school
+
+import android.annotation.SuppressLint
+import android.content.Intent
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+
+import android.view.View
+import android.widget.Toast
+import androidx.activity.viewModels
+import androidx.core.view.isVisible
+import androidx.recyclerview.widget.LinearLayoutManager
+import cl.daracenad.elearning.exercises.databinding.ActivityMatriculateBinding
+import cl.daracenad.elearning.exercises.ui.sys.AppCheckActivity
+import cl.daracenad.elearning.exercises.ui.school.adapter.AvailableCourseAdapter
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.AndroidEntryPoint
+
+@AndroidEntryPoint
+class MatriculateActivity : AppCompatActivity() {
+    private lateinit var _binding: ActivityMatriculateBinding
+    private val viewmodel: MatriculateVM by viewModels()
+
+    //private val adapter : AvailableCourseAdapter by lazy { AvailableCourseAdapter() }
+    lateinit var availableCourseAdapter : AvailableCourseAdapter
+
+    @SuppressLint("NotifyDataSetChanged")
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        _binding = ActivityMatriculateBinding.inflate(layoutInflater)
+        setContentView(_binding.root)
+
+        availableCourseAdapter = AvailableCourseAdapter(emptyList<CourseSelected>(), {course,isChecked -> onClickListener(course, isChecked)})
+        _binding.rvCourses.apply {
+            layoutManager = LinearLayoutManager(this@MatriculateActivity)
+            adapter = availableCourseAdapter
+        }
+
+        bindObservers()
+    }
+
+    private fun bindObservers() {
+        viewmodel.lstCoursesSelected.observe(this){
+            if(it != null){
+                availableCourseAdapter.lstCourses = it
+                availableCourseAdapter.notifyDataSetChanged()
+            }
+        }
+
+        viewmodel.profileLD.observe(/* owner = */ this) /* observer = */ {
+            _binding.matriculateProgressBar.isVisible = false
+            when (it) {
+                is DTOResult.Success -> {
+                    it.data?.let { school -> viewmodel.loadCourses(school) }
+                    _binding.tvNombre.text = it.data?.student!!.name
+                }
+
+                is DTOResult.Error -> {
+                    _binding.tvMessage.text = it.message
+                }
+
+                is DTOResult.Loading -> {
+
+                    _binding.matriculateProgressBar.isVisible = true
+                }
+            }
+        }
+
+        viewmodel.matriculateLD.observe(this) {
+            _binding.matriculateProgressBar.isVisible = false
+            when (it) {
+                is DTOResult.Success -> {
+                    goAppCheck()
+                }
+                is DTOResult.Error -> {
+                    _binding.tvMessage.text = it.message
+                }
+                is DTOResult.Loading -> {
+                    _binding.matriculateProgressBar.isVisible = true
+                }
+            }
+        }
+    }
+    fun btnEnrolled(view: View){
+        viewmodel.goMatriculate()
+    }
+    fun onClickListener(courseSelected:CourseSelected, isChecked:Boolean){
+        //viewmodel.modifyCoursesSelected(courseSelected, isChecked)
+        //Toast.makeText(this@MatriculateActivity,"click curso ${courseSelected.course.name} ${isChecked}", Toast.LENGTH_LONG).show()
+    }
+    private fun goAppCheck() {
+        val intent = Intent(this, AppCheckActivity::class.java)
+        startActivity(intent)
+        finish()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationVM.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationVM.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationVM.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/download/CoursesForInstallationVM.kt	(date 1695760839000)
@@ -0,0 +1,47 @@
+package cl.daracenad.elearning.exercises.ui.school.download
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import cl.daracenad.elearning.exercises.domain.model.school.Course
+import cl.daracenad.elearning.exercises.domain.usecase.school.course.CoursesForInstallationUC
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class CoursesForInstallationVM @Inject constructor(
+    private val coursesForInstallationUC: CoursesForInstallationUC
+) : ViewModel(){
+
+    //val coursesInProcessDownload:LiveData
+    val coursesForIntallLD: LiveData<DTOResult<List<Course>>>
+        get() = coursesForInstallationUC.dtoResultLD
+
+    private var _listCoursesSelected = MutableLiveData<List<CourseSelected>?>()
+    val lstCoursesSelected: MutableLiveData<List<CourseSelected>?> get() = _listCoursesSelected
+
+    init {
+        viewModelScope.launch(Dispatchers.IO) {
+            coursesForInstallationUC.invoke()
+        }
+    }
+
+    fun loadCourses(courses: List<Course>) {
+        var coll: List<CourseSelected> = emptyList()
+        if (courses != null)
+            courses?.forEach { course ->
+                coll += CourseSelected(course, false)
+            }
+        lstCoursesSelected.postValue(coll)
+    }
+
+    fun downloadCourses(course: Course){
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesForInstallationUC.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesForInstallationUC.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesForInstallationUC.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/usecase/school/course/CoursesForInstallationUC.kt	(date 1695760839000)
@@ -0,0 +1,32 @@
+package cl.daracenad.elearning.exercises.domain.usecase.school.course
+
+import android.util.Log
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import cl.daracenad.elearning.exercises.data.RepositorySchoolDB
+import cl.daracenad.elearning.exercises.domain.model.school.Course
+import cl.daracenad.elearning.exercises.domain.model.school.School
+import cl.daracenad.elearning.exercises.utils.usercase.DTOResult
+import javax.inject.Inject
+
+class CoursesForInstallationUC @Inject constructor(
+    private val repositorySchoolDB: RepositorySchoolDB
+) {
+    private val _dtoResultLD = MutableLiveData<DTOResult<List<Course>>>()
+    val dtoResultLD: LiveData<DTOResult<List<Course>>>
+        get() = _dtoResultLD
+
+        suspend operator fun invoke() {
+            _dtoResultLD.postValue(DTOResult.Loading())
+
+            try {
+                _dtoResultLD.postValue(DTOResult.Success(
+                    repositorySchoolDB.coursesPendingInstallation()
+                ))
+            }catch(ex: Exception){
+                Log.e("msgdad CoursesForInstallationUC","${ex.message}")
+                _dtoResultLD.postValue(DTOResult.Error("DB : ${ex.message}"))
+            }
+        }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/MatriculateSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/MatriculateSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/MatriculateSerialize.kt
new file mode 100644
--- /dev/null	(date 1694441546000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/MatriculateSerialize.kt	(date 1694441546000)
@@ -0,0 +1,11 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class  MatriculateSerialize (
+    @SerializedName("id") val id:String,
+    @SerializedName("description") val description:String,
+    @SerializedName("enrolledDate") val enrolledDate:Int,
+    @SerializedName("enrolledExpirate") val enrolledExpirate:Int,
+    @SerializedName("enrolledCourse") val enrolledCourses: List<EnrolledCourseSerialize>?
+)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppStatus.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppStatus.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppStatus.kt
new file mode 100644
--- /dev/null	(date 1693956295000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppStatus.kt	(date 1693956295000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.domain.model
+
+data class AppStatus(val rtn: Int, val text:String)
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/ApiServiceBorrar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/ApiServiceBorrar.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/ApiServiceBorrar.kt
new file mode 100644
--- /dev/null	(date 1695317986000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/ApiServiceBorrar.kt	(date 1695317986000)
@@ -0,0 +1,88 @@
+package cl.daracenad.elearning.exercises.utils
+
+import cl.daracenad.elearning.exercises.utils.http.HeaderInterceptor
+import cl.daracenad.elearning.exercises.data.network.model.LoginResponse
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.AnswerResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.CourseResponse
+import cl.daracenad.elearning.exercises.data.network.model.sys.DonwloadTableResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.QuestionResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TestTemplateResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TopicResponse
+import com.google.gson.GsonBuilder
+import okhttp3.OkHttpClient
+import retrofit2.Call
+import retrofit2.Retrofit
+import retrofit2.converter.gson.GsonConverterFactory
+import retrofit2.http.GET
+import retrofit2.http.Header
+import retrofit2.http.POST
+import retrofit2.http.Query
+
+interface ApiServiceBorrar {
+
+    @POST(value="login")
+    fun postLogin(
+        @Query(value="email") email:String,
+        @Query(value="password") password:String
+    ): Call<LoginResponse>
+
+    @POST(value="register")
+    fun postRequest(
+        @Query(value="name") name:String,
+        @Query(value="email") email:String,
+        @Query(value="password") password:String,
+        @Query(value="password_confirmation") password_confirmation:String
+    ): Call<SchoolResponse>
+
+    @GET(value="download-table")
+    fun downloadTable(
+        @Header("Authorization") token: String
+    ): Call<DonwloadTableResponse>
+
+    @GET(value="download-topicSerializes")
+    fun downloadTopics(
+        @Header("Authorization") token: String
+    ): Call<TopicResponse>
+    @GET(value="download-test-templates")
+    fun downloadTestTemplates(
+        @Header("Authorization") token: String
+    ): Call<TestTemplateResponse>
+    @GET(value="download-questionSerializes")
+    fun downloadQuestions(
+        @Header("Authorization") token: String
+    ): Call<QuestionResponse>
+
+    @GET(value="download-answerSerializes")
+    fun downloadAnswers(
+        @Header("Authorization") token: String
+    ): Call<AnswerResponse>
+
+    @GET(value="cours")
+    fun getCourses(
+        @Header("Authorization") token: String
+        ): Call<CourseResponse>
+
+    companion object Factory{
+        private const val BASE_URL = "https://buscameaqui.cl/api/"
+
+        fun create(): ApiServiceBorrar {
+            val gson = GsonBuilder().setLenient().create()
+            val retrofit = Retrofit.Builder()
+                .baseUrl(BASE_URL)
+                .addConverterFactory(GsonConverterFactory.create(gson))
+                .client(getClient())
+                .build()
+
+            return retrofit.create(ApiServiceBorrar::class.java)
+        }
+
+        private fun getClient(): OkHttpClient {
+            val client = OkHttpClient.Builder()
+                .addInterceptor(HeaderInterceptor())
+                .build()
+
+            return client
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/CourseResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/CourseResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/CourseResponse.kt
new file mode 100644
--- /dev/null	(date 1694263852000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/CourseResponse.kt	(date 1694263852000)
@@ -0,0 +1,13 @@
+package cl.daracenad.elearning.exercises.data.network.model.school
+
+import cl.daracenad.elearning.exercises.data.network.model.serialize.CourseSerialize
+import cl.daracenad.elearning.exercises.data.network.model.serialize.SchoolSerialize
+import com.google.gson.annotations.SerializedName
+
+data class CourseResponse(
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String>,
+    @SerializedName("version") val version: Int,
+    @SerializedName("download") val download: Boolean,
+    @SerializedName("school") var school: List<SchoolSerialize>
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/http/RetrofitHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/RetrofitHelper.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/RetrofitHelper.kt
new file mode 100644
--- /dev/null	(date 1694705777000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/RetrofitHelper.kt	(date 1694705777000)
@@ -0,0 +1,45 @@
+package cl.daracenad.elearning.exercises.utils
+
+import cl.daracenad.elearning.exercises.utils.http.ConnectivityInterceptor
+import cl.daracenad.elearning.exercises.utils.http.HeaderInterceptor
+import com.google.gson.GsonBuilder
+import okhttp3.OkHttpClient
+import okhttp3.logging.HttpLoggingInterceptor
+
+import retrofit2.Retrofit
+import retrofit2.converter.gson.GsonConverterFactory
+import java.util.concurrent.TimeUnit
+
+object RetrofitHelperx {
+    const val BASE_URL = "https://buscameaqui.cl/api/"
+    fun getRetrofit(): Retrofit{
+        val gson = GsonBuilder().setLenient().create()
+        return Retrofit.Builder()
+            .baseUrl(BASE_URL)
+            .addConverterFactory(GsonConverterFactory.create(gson))
+            .client(getClient())
+            .build()
+    }
+    //show Network information in to the logcat
+    val intercepter = run{
+        val httpLoggingInterceptor = HttpLoggingInterceptor()
+        httpLoggingInterceptor.apply {
+            httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.BODY
+        }
+    }
+
+    private fun getClient(): OkHttpClient {
+        val client = OkHttpClient.Builder()
+            .addInterceptor(HeaderInterceptor())
+            .addInterceptor(intercepter)
+            .addInterceptor(ConnectivityInterceptor())
+            /*.connectTimeout(30, TimeUnit.SECONDS) //Backend is really slow
+            .writeTimeout(30, TimeUnit.SECONDS)
+            .readTimeout(30, TimeUnit.SECONDS)*/
+            .build()
+
+        return client
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/MatriculateEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/MatriculateEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/MatriculateEntity.kt
new file mode 100644
--- /dev/null	(date 1694472321000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/MatriculateEntity.kt	(date 1694472321000)
@@ -0,0 +1,42 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.Index
+import androidx.room.PrimaryKey
+import org.jetbrains.annotations.NotNull
+
+
+@Entity(
+    tableName = "matriculates",
+    indices = [
+        Index(value = ["studentId"], unique = false),
+        Index(value = ["schoolId"], unique = false)
+    ],
+    foreignKeys = [
+        ForeignKey(
+            entity = SchoolEntity::class,
+            parentColumns = arrayOf("id"),
+            childColumns = arrayOf("schoolId")
+        ),
+        ForeignKey(
+            entity = StudentEntity::class,
+            parentColumns = arrayOf("id"),
+            childColumns = arrayOf("studentId")
+        )
+    ]
+)
+class MatriculateEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id: String,
+    @ColumnInfo(name = "schoolId") var schoolId: String,
+    @ColumnInfo(name = "studentId") var studentId: String,
+    @ColumnInfo(name = "description") var description: String,
+    @ColumnInfo(name = "enrolled_date") var enrolledDate: Int,
+    @ColumnInfo(name = "enrolled_expirate") var enrolledExpirate: Int,
+    @ColumnInfo(name = "status") @NotNull var status: String
+) {
+    companion object {
+        const val TABLE_NAME = "matriculates"
+    }
+}
\ No newline at end of file
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1692228593000)
+++ b/.idea/.name	(date 1692228593000)
@@ -0,0 +1,1 @@
+Exercises
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/UserProfile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/UserProfile.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/UserProfile.kt
new file mode 100644
--- /dev/null	(date 1694268023000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/sys/UserProfile.kt	(date 1694268023000)
@@ -0,0 +1,7 @@
+package cl.daracenad.elearning.exercises.domain.model.sys
+
+data class UserProfile (
+    val email:String,
+    val name:String,
+    val token:String
+)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/CourseEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/CourseEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/CourseEntity.kt
new file mode 100644
--- /dev/null	(date 1694472023000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/CourseEntity.kt	(date 1694472023000)
@@ -0,0 +1,32 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.Index
+import androidx.room.PrimaryKey
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "courses",
+    indices = [Index(value=["schoolId"], unique = false)],
+    foreignKeys = [ForeignKey(
+        entity = SchoolEntity::class,
+        parentColumns = arrayOf("id"),
+        childColumns = arrayOf("schoolId")
+    )
+    ]
+)
+data class CourseEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id:String,
+    @ColumnInfo(name = "schoolId") @NotNull var schoolId:String,
+    @ColumnInfo(name = "name") @NotNull var name:String,
+    @ColumnInfo(name = "description") var description:String,
+    @ColumnInfo(name = "type") @NotNull var type:String,
+    @ColumnInfo(name = "duration") @NotNull var duration:Int,
+    @ColumnInfo(name = "status") @NotNull var status:String
+){
+    companion object {
+        const val TABLE_NAME = "courses"
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/LoginResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/LoginResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/LoginResponse.kt
new file mode 100644
--- /dev/null	(date 1693833134000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/LoginResponse.kt	(date 1693833134000)
@@ -0,0 +1,12 @@
+package cl.daracenad.elearning.exercises.data.network.model
+
+import com.google.gson.annotations.SerializedName
+
+data class LoginResponse (
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String>,
+    @SerializedName("email") val email:String,
+    @SerializedName("name") val name:String,
+    @SerializedName("schoolId") val schoolId:String,
+    @SerializedName("token") val access_token:String
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenUpdateSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenUpdateSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenUpdateSrv.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppTokenUpdateSrv.kt	(date 1695760840000)
@@ -0,0 +1,14 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.model.User
+import javax.inject.Inject
+
+class AppTokenUpdateSrv  @Inject constructor(
+    private val repository: RepositoryDB
+)  {
+    suspend operator fun invoke(token:String){
+        repository.parameterInsertFormDB(AppParameterEntity(User.TOKEN,token, 0, null))
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/card_course.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/card_course.xml b/app/src/main/res/layout/card_course.xml
new file mode 100644
--- /dev/null	(date 1693514404000)
+++ b/app/src/main/res/layout/card_course.xml	(date 1693514404000)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    app:cardCornerRadius="10dp"
+    app:cardElevation="8dp"
+    app:cardMaxElevation="5dp"
+    android:layout_margin="10dp"
+    >
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <CheckBox
+            android:id="@+id/chkCuorse"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="CheckBox" />
+
+    </LinearLayout>
+</androidx.cardview.widget.CardView>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/ProfileActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/ProfileActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/ProfileActivity.kt
new file mode 100644
--- /dev/null	(date 1693927204000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/ProfileActivity.kt	(date 1693927204000)
@@ -0,0 +1,26 @@
+package cl.daracenad.elearning.exercises.ui
+
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.view.View
+import androidx.activity.viewModels
+import cl.daracenad.elearning.exercises.R
+import cl.daracenad.elearning.exercises.databinding.ActivityProfileBinding
+import cl.daracenad.elearning.exercises.ui.viewmodel.ProfileViewModel
+
+class ProfileActivity : AppCompatActivity() {
+    private lateinit var  binding:ActivityProfileBinding
+    private val viewmodel: ProfileViewModel by viewModels()
+
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        binding = ActivityProfileBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+    }
+
+    fun btnActualizar(view: View){
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/ReturnModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/ReturnModel.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/ReturnModel.kt
new file mode 100644
--- /dev/null	(date 1694225822000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/ReturnModel.kt	(date 1694225822000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.domain.model
+
+data class ReturnModel (val success:Int,val messages : List<String>)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AppParameterEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AppParameterEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AppParameterEntity.kt
new file mode 100644
--- /dev/null	(date 1694653073000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AppParameterEntity.kt	(date 1694653073000)
@@ -0,0 +1,19 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+import cl.daracenad.elearning.exercises.domain.model.AppParameter
+import org.jetbrains.annotations.NotNull
+@Entity(tableName = "parameters")
+data class AppParameterEntity(
+    @PrimaryKey @ColumnInfo(name = "key") @NotNull var key :String,
+    @ColumnInfo(name = "valueString") @NotNull var valueString:String,
+    @ColumnInfo(name = "valueInt") @NotNull var valueInt:Int,
+    @ColumnInfo(name = "valueBA", typeAffinity = ColumnInfo.BLOB)  var valueBA:ByteArray?
+    ){
+    companion object {
+        const val TABLE_NAME = "parameters"
+    }
+}
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/di/RoomModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/di/RoomModule.kt b/app/src/main/java/cl/daracenad/elearning/exercises/di/RoomModule.kt
new file mode 100644
--- /dev/null	(date 1695685489000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/di/RoomModule.kt	(date 1695685489000)
@@ -0,0 +1,74 @@
+package cl.daracenad.elearning.exercises.di
+
+import android.content.Context
+import androidx.room.Room
+import cl.daracenad.elearning.exercises.data.database.ExerciseDB
+
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
+import javax.inject.Singleton
+
+@Module
+@InstallIn(SingletonComponent::class)
+object RoomModule {
+    const val DATABASE_NAME = "exercise_db"
+
+    @Singleton
+    @Provides
+    fun provideRoom(@ApplicationContext context:Context)
+    = Room.databaseBuilder(context,
+        ExerciseDB::class.java,DATABASE_NAME )
+        .fallbackToDestructiveMigration()
+        .build()
+
+
+    @Singleton
+    @Provides
+    fun provideAnswerDAO(db:ExerciseDB) = db.answerDAO()
+
+    @Singleton
+    @Provides
+    fun provideMatriculateDAO(db:ExerciseDB) = db.matriculateDAO()
+
+
+    @Singleton
+    @Provides
+    fun provideEnrolledCourseDAO(db:ExerciseDB) = db.enrolledCourseDAO()
+
+
+    @Singleton
+    @Provides
+    fun provideCourseDAO(db:ExerciseDB) = db.courseDAO()
+
+    @Singleton
+    @Provides
+    fun provideTestTemplateDAO(db:ExerciseDB) = db.testTemplateDAO()
+
+    @Singleton
+    @Provides
+    fun provideTopicDAO(db:ExerciseDB) = db.topicDAO()
+
+    @Singleton
+    @Provides
+    fun provideQuestionDAO(db:ExerciseDB) = db.questionDAO()
+
+    @Singleton
+    @Provides
+    fun provideDownloadTableDAO(db:ExerciseDB) = db.downloadTableDAO()
+
+    @Singleton
+    @Provides
+    fun provideStudentDAO(db:ExerciseDB) = db.studentDAO()
+
+    @Singleton
+    @Provides
+    fun provideSchoolDAO(db:ExerciseDB) = db.schoolDAO()
+
+    @Singleton
+    @Provides
+    fun provideParameterDAO(db:ExerciseDB) = db.parameterDAO()
+
+}
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1692228593000)
+++ b/.idea/vcs.xml	(date 1692228593000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/ReturnResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/ReturnResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/ReturnResponse.kt
new file mode 100644
--- /dev/null	(date 1694265105000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/ReturnResponse.kt	(date 1694265105000)
@@ -0,0 +1,7 @@
+package cl.daracenad.elearning.exercises.data.network
+
+import com.google.gson.annotations.SerializedName
+
+class ReturnResponse(@SerializedName("success") val success:Int,
+                     @SerializedName("messages") val messages: List<String>
+)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelStudentIdNotFound.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelStudentIdNotFound.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelStudentIdNotFound.kt
new file mode 100644
--- /dev/null	(date 1694511184000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/ModelStudentIdNotFound.kt	(date 1694511184000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.utils.exception
+
+class ModelStudentIdNotFound (override val message:String):Exception(message)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/UpdateDataUserCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/UpdateDataUserCase.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/UpdateDataUserCase.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/UpdateDataUserCase.kt	(date 1695760839000)
@@ -0,0 +1,27 @@
+package cl.daracenad.elearning.exercises.domain
+
+import cl.daracenad.elearning.exercises.domain.service.download.AnswerDownloadSrv
+import javax.inject.Inject
+
+class UpdateDataUserCase  @Inject constructor(
+    private val answerUpdateTable: AnswerDownloadSrv
+)  {
+    suspend operator fun invoke(token:String):Int {
+        answerUpdateTable.invoke()
+        return 0
+    }
+/*
+        var donwloadTableResponse = repository.downloadSysTablesFromAPI(token)
+        if(donwloadTableResponse!!.success == 0){
+            val dts:List<DownloadTableEntity>
+                    = donwloadTableResponse.downloadTables.map { it.toEntity() }
+            repository.downloadTablesInsertFromDB(dts)
+            repository.parameterInsertFormDB(AppParameterEntity("download_tables","OK", 0))
+
+            //for (dt in dts){
+
+
+        }
+*/
+
+}
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1692228595000)
+++ b/.idea/.gitignore	(date 1692228595000)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/db/DataBaseResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/db/DataBaseResult.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/db/DataBaseResult.kt
new file mode 100644
--- /dev/null	(date 1694608360000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/db/DataBaseResult.kt	(date 1694608360000)
@@ -0,0 +1,9 @@
+package cl.daracenad.elearning.exercises.utils.db
+
+sealed class DataBaseResult<T>(val data: T? = null, val message: String? = null) {
+
+    class Success<T>(data: T) : DataBaseResult<T>(data)
+    class Error<T>(message: String?, data: T? = null) : DataBaseResult<T>(data, message)
+    class Loading<T> : DataBaseResult<T>()
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TestTemplateResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TestTemplateResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TestTemplateResponse.kt
new file mode 100644
--- /dev/null	(date 1694263538000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TestTemplateResponse.kt	(date 1694263538000)
@@ -0,0 +1,12 @@
+package cl.daracenad.elearning.exercises.data.network.model.test
+
+import cl.daracenad.elearning.exercises.data.network.model.serialize.TestTemplateSerialize
+import com.google.gson.annotations.SerializedName
+
+data class TestTemplateResponse(
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String>,
+    @SerializedName("version") val version: Int,
+    @SerializedName("download") val download: Boolean,
+    @SerializedName("templates") var templates: List<TestTemplateSerialize>
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/EnrolledCourseSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/EnrolledCourseSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/EnrolledCourseSerialize.kt
new file mode 100644
--- /dev/null	(date 1694440268000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/EnrolledCourseSerialize.kt	(date 1694440268000)
@@ -0,0 +1,9 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class EnrolledCourseSerialize(
+    @SerializedName("id") val id:String,
+    @SerializedName("courses") val courses: List<CourseSerialize>?
+
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/http/WifiService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/WifiService.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/WifiService.kt
new file mode 100644
--- /dev/null	(date 1694511184000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/WifiService.kt	(date 1694511184000)
@@ -0,0 +1,33 @@
+package cl.daracenad.elearning.exercises.utils.http
+
+import android.content.Context
+import android.net.ConnectivityManager
+import android.net.NetworkCapabilities
+import android.net.wifi.WifiManager
+
+class WifiService {
+    private lateinit var wifiManager: WifiManager
+    private lateinit var connectivityManager: ConnectivityManager
+
+    companion object {
+        val instance = WifiService()
+    }
+
+    fun initializeWithApplicationContext (context: Context) {
+        wifiManager = context.getSystemService(Context.WIFI_SERVICE) as WifiManager
+        connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
+    }
+
+    // Helper that detects if online
+    fun isOnline(): Boolean {
+        val capabilities = connectivityManager.getNetworkCapabilities(connectivityManager.activeNetwork)
+        if (capabilities != null) {
+            when {
+                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> return true
+                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> return true
+                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> return true
+            }
+        }
+        return false
+    }
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/QuestionEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/QuestionEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/QuestionEntity.kt
new file mode 100644
--- /dev/null	(date 1694472775000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/QuestionEntity.kt	(date 1694472775000)
@@ -0,0 +1,34 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.Index
+import androidx.room.PrimaryKey
+import com.google.gson.annotations.SerializedName
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "questions",
+    indices = [Index(value=["schoolId","courseId","topicId" ], unique = false)],
+    foreignKeys = [ForeignKey(
+        entity = TestTemplateEntity::class,
+        parentColumns = arrayOf("id"),
+        childColumns = arrayOf("testTemplateId")
+    )
+    ]
+)
+data class QuestionEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id:String,
+    @ColumnInfo("schoolId") val schoolId:String,
+    @ColumnInfo("courseId") val courseId:String,
+    @ColumnInfo("topicId") val topicId:String,
+    @ColumnInfo("testTemplateId") val testTemplateId:String,
+    @ColumnInfo("name") val name:String,
+    @ColumnInfo("description") val description:String,
+    @ColumnInfo("status") val status:String
+){
+    companion object {
+        const val TABLE_NAME = "questions"
+    }
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/AvailableCourseAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/AvailableCourseAdapter.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/AvailableCourseAdapter.kt
new file mode 100644
--- /dev/null	(date 1694388399000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/school/adapter/AvailableCourseAdapter.kt	(date 1694388399000)
@@ -0,0 +1,36 @@
+package cl.daracenad.elearning.exercises.ui.school.adapter
+
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.CheckBox
+import androidx.recyclerview.widget.RecyclerView
+import cl.daracenad.elearning.exercises.R
+import cl.daracenad.elearning.exercises.databinding.ActivityMatriculateBinding
+import cl.daracenad.elearning.exercises.domain.model.school.Course
+import cl.daracenad.elearning.exercises.ui.school.model.CourseSelected
+
+
+class AvailableCourseAdapter(
+    var lstCourses:List<CourseSelected>,
+    val onClickListener:(CourseSelected, Boolean) -> Unit
+): RecyclerView.Adapter<CourseViewHolder>() {
+    private lateinit var binding:ActivityMatriculateBinding
+    //class CourseViewHolder(val binding: CardCourseBinding) : RecyclerView.ViewHolder(binding.root)
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseViewHolder {//CourseViewHolder {
+        return CourseViewHolder(
+        LayoutInflater.from(parent.context).inflate(R.layout.card_course, parent, false)
+        )
+    }
+
+    override fun getItemCount(): Int {
+        return lstCourses.size
+    }
+
+    override fun onBindViewHolder(holder: CourseViewHolder, position: Int) {
+        //holder.binding.chkCuorse.text = lstCourses[position].name.toString()
+        holder.render(lstCourses[position],onClickListener)
+    }
+
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TestTemplateDownloadSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TestTemplateDownloadSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TestTemplateDownloadSrv.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TestTemplateDownloadSrv.kt	(date 1695760840000)
@@ -0,0 +1,67 @@
+package cl.daracenad.elearning.exercises.domain.service.download
+
+
+import cl.daracenad.elearning.exercises.data.DownloadTestAPI
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.data.database.entities.TestTemplateEntity
+
+import cl.daracenad.elearning.exercises.domain.service.app.AppParameterFindSrv
+import cl.daracenad.elearning.exercises.domain.model.AppParameter
+import cl.daracenad.elearning.exercises.domain.model.test.TestTemplate
+import cl.daracenad.elearning.exercises.domain.model.test.toDomain
+import cl.daracenad.elearning.exercises.domain.model.test.toEntity
+import javax.inject.Inject
+
+class TestTemplateDownloadSrv @Inject constructor(
+    private val repository: RepositoryDB,
+    private val downloadTestAPI: DownloadTestAPI,
+    private val appParameterFindSrv: AppParameterFindSrv,
+)  {
+    suspend operator fun invoke(): Int {
+
+
+        val tokenParameter: AppParameter = appParameterFindSrv.invoke("token")
+        var versionParameter: AppParameter = appParameterFindSrv.invoke("test_templates")
+        var schoolIdParameter: AppParameter = appParameterFindSrv.invoke("schoolId")
+
+        val token = tokenParameter.valueString
+        val version = versionParameter.valueInteger
+        val schoolId = schoolIdParameter.valueString
+
+        var downloadResponse = downloadTestAPI.downloadTestTemplatesFromAPI(
+            "Bearer ${token}",
+            schoolId,
+            version
+        )
+
+        if (downloadResponse != null) {
+            if (downloadResponse.success == 0) {
+                if (downloadResponse.download) {
+                    //insertar los datos.
+                    val tmp = downloadResponse.templates
+                    var domain: List<TestTemplate> = tmp.map {
+                        it.toDomain()
+                    }
+                    var entities: List<TestTemplateEntity> = domain.map {
+                        it.toEntity()
+                    }
+                    repository.testTemplateInsertListFromDB(entities)
+
+                    //Actualizar la version
+                    val entity = AppParameterEntity("test_templates","",downloadResponse.version, null)
+
+                    repository.parameterInsertFormDB(entity)
+                } else {
+                    return 1 //No es necesario actualizar
+                }
+            }
+        } else {
+
+            return 2
+        }
+
+
+        return 0
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AnswerEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AnswerEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AnswerEntity.kt
new file mode 100644
--- /dev/null	(date 1694471965000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/AnswerEntity.kt	(date 1694471965000)
@@ -0,0 +1,31 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.Index
+import androidx.room.PrimaryKey
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "answers",
+    indices = [Index(value=["questionId"], unique = false)],
+    foreignKeys = [ForeignKey(
+        entity = QuestionEntity::class,
+        parentColumns = arrayOf("id"),
+        childColumns = arrayOf("questionId")
+    )
+    ]
+)
+data class AnswerEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id:String,
+    @ColumnInfo(name = "name") @NotNull var name:String,
+    @ColumnInfo(name = "description") @NotNull var description:String,
+    @ColumnInfo(name = "isOk") @NotNull var isOk:Boolean,
+    @ColumnInfo(name = "status") @NotNull var status:String,
+    @ColumnInfo(name = "questionId") @NotNull var questionId:String
+) {
+    companion object {
+        const val TABLE_NAME = "answers"
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/http/NetworkResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/NetworkResult.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/NetworkResult.kt
new file mode 100644
--- /dev/null	(date 1694511301000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/NetworkResult.kt	(date 1694511301000)
@@ -0,0 +1,9 @@
+package cl.daracenad.elearning.exercises.utils.http
+
+sealed class NetworkResult<T>(val data: T? = null, val message: String? = null) {
+
+    class Success<T>(data: T) : NetworkResult<T>(data)
+    class Error<T>(message: String?, data: T? = null) : NetworkResult<T>(data, message)
+    class Loading<T> : NetworkResult<T>()
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/QuestionResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/QuestionResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/QuestionResponse.kt
new file mode 100644
--- /dev/null	(date 1694263538000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/QuestionResponse.kt	(date 1694263538000)
@@ -0,0 +1,13 @@
+package cl.daracenad.elearning.exercises.data.network.model.test
+
+import cl.daracenad.elearning.exercises.data.network.model.serialize.QuestionSerialize
+import com.google.gson.annotations.SerializedName
+
+data class QuestionResponse(
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String>,
+    @SerializedName("version") val version: Int,
+    @SerializedName("download") val download: Boolean,
+    @SerializedName("questions") val questions:List<QuestionSerialize>
+)
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/SchoolResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/SchoolResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/SchoolResponse.kt
new file mode 100644
--- /dev/null	(date 1694524211000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/SchoolResponse.kt	(date 1694524211000)
@@ -0,0 +1,12 @@
+package cl.daracenad.elearning.exercises.data.network.model
+
+import cl.daracenad.elearning.exercises.data.network.model.serialize.SchoolSerialize
+import cl.daracenad.elearning.exercises.data.network.model.serialize.StudentSerialize
+import cl.daracenad.elearning.exercises.data.network.model.serialize.UserSerialize
+import com.google.gson.annotations.SerializedName
+
+data class SchoolResponse(
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String?>?,
+    @SerializedName("school") val school: SchoolSerialize?
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITestTemplateDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITestTemplateDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITestTemplateDAO.kt
new file mode 100644
--- /dev/null	(date 1692931851000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITestTemplateDAO.kt	(date 1692931851000)
@@ -0,0 +1,31 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.TestTemplateEntity
+
+@Dao
+interface ITestTemplateDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: TestTemplateEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<TestTemplateEntity>)
+
+    @Update
+    suspend fun update(vararg entity: TestTemplateEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: TestTemplateEntity)
+
+    @Query("SELECT * FROM " + TestTemplateEntity.TABLE_NAME)
+    fun all(): LiveData<List<TestTemplateEntity>>
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IAnswerDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IAnswerDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IAnswerDAO.kt
new file mode 100644
--- /dev/null	(date 1693181976000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IAnswerDAO.kt	(date 1693181976000)
@@ -0,0 +1,32 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.AnswerEntity
+
+@Dao
+interface IAnswerDAO {
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: AnswerEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<AnswerEntity>)
+
+    @Update
+    suspend fun update(vararg entity: AnswerEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: AnswerEntity)
+
+    @Query("SELECT * FROM " + AnswerEntity.TABLE_NAME)
+    suspend fun all(): List<AnswerEntity>?
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_topic.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_topic.xml b/app/src/main/res/layout/activity_topic.xml
new file mode 100644
--- /dev/null	(date 1694373351000)
+++ b/app/src/main/res/layout/activity_topic.xml	(date 1694373351000)
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".ui.TopicActivity">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <Button
+            android:id="@+id/btnMatricularse"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:onClick="btnVer"
+            android:text="Button" />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:orientation="vertical">
+
+            <androidx.recyclerview.widget.RecyclerView
+                android:id="@+id/rvTopic"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                tools:listitem="@layout/card_topic"/>
+
+        </LinearLayout>
+
+
+    </LinearLayout>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TestTemplateEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TestTemplateEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TestTemplateEntity.kt
new file mode 100644
--- /dev/null	(date 1693177507000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/TestTemplateEntity.kt	(date 1693177507000)
@@ -0,0 +1,29 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.PrimaryKey
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "test_templates",
+    foreignKeys = [ForeignKey(
+        entity = TopicEntity::class,
+        parentColumns = arrayOf("id"),
+        childColumns = arrayOf("topicId")
+    )
+    ]
+)
+data class TestTemplateEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id:String,
+    @ColumnInfo(name = "topicId") @NotNull var topicId:String,
+    @ColumnInfo(name = "name")  var name:String,
+    @ColumnInfo(name = "description")  var description:String,
+    @ColumnInfo(name = "status") @NotNull var status:String,
+    @ColumnInfo(name = "type")  var type:String
+){
+    companion object {
+        const val TABLE_NAME = "test_templates"
+    }
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TestTemplateSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TestTemplateSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TestTemplateSerialize.kt
new file mode 100644
--- /dev/null	(date 1693178736000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TestTemplateSerialize.kt	(date 1693178736000)
@@ -0,0 +1,13 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class TestTemplateSerialize(
+    @SerializedName("schoolId") val schoolId: String,
+    @SerializedName("courseId") val courseId: String,
+    @SerializedName("topicId") val topicId: String,
+    @SerializedName("testTemplateId") val id: String,
+    @SerializedName("testTemplateName") val name: String,
+    @SerializedName("testTemplateDescription") val description: String,
+    @SerializedName("testTemplateType") val type: String
+)
Index: app/src/main/java/cl/daracenad/elearning/exercises/io/HeaderInterceptor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/io/HeaderInterceptor.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/HeaderInterceptor.kt
rename from app/src/main/java/cl/daracenad/elearning/exercises/io/HeaderInterceptor.kt
rename to app/src/main/java/cl/daracenad/elearning/exercises/utils/http/HeaderInterceptor.kt
--- a/app/src/main/java/cl/daracenad/elearning/exercises/io/HeaderInterceptor.kt	(revision fb0d643ef364836986f794847ac445143be2658f)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/HeaderInterceptor.kt	(date 1695386366000)
@@ -1,14 +1,24 @@
-package cl.daracenad.elearning.exercises.io
+package cl.daracenad.elearning.exercises.utils.http
+
 
 import okhttp3.Interceptor
 import okhttp3.Response
 
 class HeaderInterceptor: Interceptor {
+    var token : String = "";
+
+    fun Token(token: String ) {
+        this.token = token;
+    }
     override fun intercept(chain: Interceptor.Chain): Response {
+        val finalToken =  "Bearer "+token
         val request = chain.request().newBuilder()
-            .addHeader("accept","application/json")
-            .addHeader("content-Type","application/json; charset=UTF-8")
+            .addHeader("Accept","application/json")
+            .addHeader("Content-Type","application/json; charset=UTF-8")
+            //.addHeader("Authorization",finalToken)
             .build()
-        return chain.proceed(request)
+        val c = chain.proceed(request)
+
+        return c
     }
-}
\ No newline at end of file
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/TopicActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/TopicActivity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/TopicActivity.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/TopicActivity.kt	(date 1695386366000)
@@ -0,0 +1,75 @@
+package cl.daracenad.elearning.exercises.ui
+
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+
+import android.view.View
+import androidx.activity.viewModels
+import androidx.recyclerview.widget.LinearLayoutManager
+import cl.daracenad.elearning.exercises.databinding.ActivityTopicBinding
+import cl.daracenad.elearning.exercises.ui.adapter.TopicAdapter
+import cl.daracenad.elearning.exercises.ui.viewmodel.TopicViewModel
+import dagger.hilt.android.AndroidEntryPoint
+import javax.inject.Inject
+import androidx.appcompat.widget.SearchView
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import kotlin.random.Random
+
+@AndroidEntryPoint
+class TopicActivity @Inject constructor() : AppCompatActivity(),
+    SearchView.OnQueryTextListener{
+    private lateinit var binding: ActivityTopicBinding
+
+    private val mainViewModel: TopicViewModel by viewModels()
+    private val myAdapter: TopicAdapter by lazy { TopicAdapter() }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        //setContentView(R.layout.activity_topic)
+
+        binding = ActivityTopicBinding.inflate(layoutInflater)
+
+        setContentView(binding.root)
+
+        binding.rvTopic.layoutManager = LinearLayoutManager(this)
+        binding.rvTopic.adapter = myAdapter
+
+        mainViewModel.readData.observe(this, {
+            myAdapter.setData(it)
+        })
+
+    }
+
+    override fun onQueryTextSubmit(query: String?): Boolean {
+        return true
+    }
+
+    fun btnVer(view: View){
+        var randomGenerator = Random(System.currentTimeMillis())
+        var result = randomGenerator.nextInt(30, 50)
+
+
+        var entity =  AppParameterEntity("${result}","uno", 1, null)
+        mainViewModel.insertData(entity)
+
+        searchDatabase("")
+    }
+    fun putApp(view:View){
+        val entity =  AppParameterEntity("Uno","uno", 1, null)
+        mainViewModel.insertData(entity)
+    }
+
+    override fun onQueryTextChange(newText: String?): Boolean {
+        return true
+    }
+    private fun searchDatabase(query: String) {
+        val searchQuery = "%$query%"
+
+        mainViewModel.searchDatabase().observe(this, { list ->
+            list.let {
+
+                myAdapter.setData(it)
+            }
+        })
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/ProfileViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/ProfileViewModel.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/ProfileViewModel.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/viewmodel/ProfileViewModel.kt	(date 1695760839000)
@@ -0,0 +1,29 @@
+package cl.daracenad.elearning.exercises.ui.viewmodel
+
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class  ProfileViewModel   @Inject constructor(
+    //private val profileUpdate: UserProfileUpdate
+): ViewModel() {
+    fun register(name: String, email:String, password:String, password_confirmation:String){
+        viewModelScope.launch(Dispatchers.IO) {
+            //val result = profileUpdate.invoke(name, email)
+
+            //if(result != null)
+                //registerResponse.postValue(result!!)
+
+
+            var rtn = "courseDownloadSrv.invoke()"
+
+        }
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Topic.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Topic.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Topic.kt
new file mode 100644
--- /dev/null	(date 1694264411000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Topic.kt	(date 1694264411000)
@@ -0,0 +1,17 @@
+package cl.daracenad.elearning.exercises.domain.model.test
+
+import cl.daracenad.elearning.exercises.data.database.entities.TopicEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.TopicSerialize
+
+data class Topic (
+    val id:String,
+    val schoolId:String,
+    val courseId:String,
+    val name:String,
+    val description:String,
+    val status:String,
+    )
+//permite crear un objeto model a partir de un serialize
+fun TopicSerialize.toDomain() = Topic(id = id, schoolId=schoolId, courseId = courseId, name = name, description = description,status = "AC" )
+fun TopicEntity.toDomain() = Topic(id = id, schoolId=schoolId, courseId = courseId, name = name, description = description,status = "AC" )
+fun Topic.toEntity() = TopicEntity(id = id, schoolId=schoolId, courseId = courseId, name = name, description = description,status = "AC" )
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Question.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Question.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Question.kt
new file mode 100644
--- /dev/null	(date 1694473053000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/test/Question.kt	(date 1694473053000)
@@ -0,0 +1,26 @@
+package cl.daracenad.elearning.exercises.domain.model.test
+
+import androidx.room.ColumnInfo
+import androidx.room.PrimaryKey
+import cl.daracenad.elearning.exercises.data.database.entities.CourseEntity
+import cl.daracenad.elearning.exercises.data.database.entities.QuestionEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.CourseSerialize
+import cl.daracenad.elearning.exercises.data.network.model.serialize.QuestionSerialize
+import org.jetbrains.annotations.NotNull
+
+data class Question (
+    val id:String,
+    val schoolId:String,
+    val courseId:String,
+    val topicId:String,
+    val testTemplateId:String,
+    val name:String,
+    val description:String,
+
+)
+fun QuestionSerialize.toDomain() =
+    Question(id = id, schoolId=schoolId,courseId=courseId,topicId=topicId, testTemplateId=testTemplateId, name = name, description = description)
+fun QuestionEntity.toDomain() =
+    Question(id = id, schoolId=schoolId,courseId=courseId,topicId=topicId, testTemplateId=testTemplateId, name = name, description = description)
+fun Question.toEntity(status:String)  =
+    QuestionEntity(id = id, schoolId=schoolId,courseId=courseId,topicId=topicId, testTemplateId=testTemplateId, name = name, description = description, status = status)
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TopicSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TopicSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TopicSerialize.kt
new file mode 100644
--- /dev/null	(date 1693184159000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/TopicSerialize.kt	(date 1693184159000)
@@ -0,0 +1,11 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class TopicSerialize(
+    @SerializedName("topicId") val id:String,
+    @SerializedName("schoolId") val schoolId:String,
+    @SerializedName("courseId") val courseId:String,
+    @SerializedName("topicName") val name:String,
+    @SerializedName("topicDescription") val description:String
+    )
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/CourseSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/CourseSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/CourseSerialize.kt
new file mode 100644
--- /dev/null	(date 1694264114000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/CourseSerialize.kt	(date 1694264114000)
@@ -0,0 +1,11 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class CourseSerialize(
+    @SerializedName("id") val id:String,
+    @SerializedName("name") val name :String,
+    @SerializedName("description") val description : String,
+    @SerializedName("type") val type :String,
+    @SerializedName("duration") val duration : Int
+    )
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TopicResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TopicResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TopicResponse.kt
new file mode 100644
--- /dev/null	(date 1694263538000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/TopicResponse.kt	(date 1694263538000)
@@ -0,0 +1,13 @@
+package cl.daracenad.elearning.exercises.data.network.model.test
+
+import cl.daracenad.elearning.exercises.data.network.model.serialize.TopicSerialize
+import com.google.gson.annotations.SerializedName
+
+data class TopicResponse(
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String>,
+    @SerializedName("version") val version: Int,
+    @SerializedName("download") val download: Boolean,
+    @SerializedName("topics") val topics:List<TopicSerialize>
+)
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppParameter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppParameter.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppParameter.kt
new file mode 100644
--- /dev/null	(date 1694654493000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/AppParameter.kt	(date 1694654493000)
@@ -0,0 +1,9 @@
+package cl.daracenad.elearning.exercises.domain.model
+
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+
+class AppParameter(
+    val key:String,
+    val exists:Boolean=false, val valueString:String="", val valueInteger:Int=-1, val valueBA:ByteArray?=null)
+
+fun AppParameterEntity.toModel(exist:Boolean) = AppParameter(key = key,valueString = valueString, valueInteger = valueInt,valueBA=valueBA, exists = exist)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/User.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/User.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/User.kt
new file mode 100644
--- /dev/null	(date 1694651728000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/User.kt	(date 1694651728000)
@@ -0,0 +1,20 @@
+package cl.daracenad.elearning.exercises.domain.model
+
+class User (
+    val id:Int,
+    val name:String,
+    val eMail:String,
+    val schoolId:String,
+    val token:String
+){
+    companion object{
+        const val NAME:String = "name"
+        const val EMAIL:String = "email"
+        const val STUDENT_ID:String = "student_id"
+        const val TOKEN:String = "token"
+        const val SCHOOL_ID = "school_id"
+        const val MATRICULATE = "matriculate"
+        const val PASSWORD = "password"
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINetworkError.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINetworkError.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINetworkError.kt
new file mode 100644
--- /dev/null	(date 1694511184000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINetworkError.kt	(date 1694511184000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.utils.exception
+
+class APINetworkError(override val message:String):Exception(message)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINotSuccesFull.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINotSuccesFull.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINotSuccesFull.kt
new file mode 100644
--- /dev/null	(date 1694511184000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/exception/APINotSuccesFull.kt	(date 1694511184000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.utils.exception
+
+class APINotSuccesFull(override val message:String):Exception(message)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TopicDownloadSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TopicDownloadSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TopicDownloadSrv.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/TopicDownloadSrv.kt	(date 1695760840000)
@@ -0,0 +1,68 @@
+package cl.daracenad.elearning.exercises.domain.service.download
+
+
+import cl.daracenad.elearning.exercises.data.DownloadTestAPI
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.data.database.entities.TopicEntity
+import cl.daracenad.elearning.exercises.domain.service.app.AppParameterFindSrv
+import cl.daracenad.elearning.exercises.domain.model.AppParameter
+import cl.daracenad.elearning.exercises.domain.model.test.Topic
+import cl.daracenad.elearning.exercises.domain.model.test.toDomain
+import cl.daracenad.elearning.exercises.domain.model.test.toEntity
+import javax.inject.Inject
+
+class TopicDownloadSrv @Inject constructor(
+    private val repository: RepositoryDB,
+    private val downloadTestAPI: DownloadTestAPI,
+    private val appParameterFindSrv: AppParameterFindSrv,
+)  {
+    suspend operator fun invoke(): Int {
+
+        val tokenParameter: AppParameter = appParameterFindSrv.invoke("token")
+        var versionParameter: AppParameter = appParameterFindSrv.invoke("topics")
+        var schoolIdParameter: AppParameter = appParameterFindSrv.invoke("schoolId")
+
+        val token = tokenParameter.valueString
+        val version = versionParameter.valueInteger
+        val schoolId = schoolIdParameter.valueString
+
+        var downloadResponse = downloadTestAPI.downloadTopicsFromAPI(
+            "Bearer ${token}",
+            schoolId,
+            version
+        )
+
+
+        if (downloadResponse != null) {
+            if (downloadResponse.success == 0) {
+                if (downloadResponse.download) {
+                    //insertar los datos.
+                    val tmp = downloadResponse.topics
+                    var domain: List<Topic> = tmp.map {
+                        it.toDomain()
+                    }
+                    var entities: List<TopicEntity> = domain.map {
+                        it.toEntity()
+                    }
+                    repository.topicInsertListFromDB(entities)
+
+
+                    //Actualizar la version
+                    val entity = AppParameterEntity("topics","",downloadResponse.version, null)
+                    repository.parameterInsertFormDB(entity)
+
+                } else {
+                    return 1 //No es necesario actualizar
+                }
+            }
+        } else {
+
+            return 2
+        }
+
+
+        return 0
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/QuestionDownloadSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/QuestionDownloadSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/QuestionDownloadSrv.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/QuestionDownloadSrv.kt	(date 1695760839000)
@@ -0,0 +1,71 @@
+package cl.daracenad.elearning.exercises.domain.service.download
+
+
+import cl.daracenad.elearning.exercises.data.DownloadTestAPI
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.data.database.entities.QuestionEntity
+import cl.daracenad.elearning.exercises.domain.service.app.AppParameterFindSrv
+import cl.daracenad.elearning.exercises.domain.model.AppParameter
+import cl.daracenad.elearning.exercises.domain.model.test.Question
+import cl.daracenad.elearning.exercises.domain.model.test.toDomain
+import cl.daracenad.elearning.exercises.domain.model.test.toEntity
+import javax.inject.Inject
+
+class QuestionDownloadSrv @Inject constructor(
+    private val repository: RepositoryDB,
+    private val downloadTestAPI: DownloadTestAPI,
+    private val appParameterFindSrv: AppParameterFindSrv,
+)  {
+    suspend operator fun invoke(): Int {
+
+
+        val tokenParameter: AppParameter = appParameterFindSrv.invoke("token")
+        var versionParameter: AppParameter = appParameterFindSrv.invoke("questions")
+        var schoolIdParameter: AppParameter = appParameterFindSrv.invoke("schoolId")
+
+        val token = tokenParameter.valueString
+        val version = versionParameter.valueInteger
+        val schoolId = schoolIdParameter.valueString
+
+        var downloadResponse = downloadTestAPI.downloadQuestionsFromAPI(
+            "Bearer ${token}",
+            schoolId,
+            version
+        )
+
+
+        if (downloadResponse != null) {
+            if (downloadResponse.success == 0) {
+                if (downloadResponse.download) {
+                    //insertar los datos.
+                    val tmp = downloadResponse.questions
+
+                    var domain: List<Question> = tmp.map {
+                        it.toDomain()
+                    }
+                    var entities: List<QuestionEntity> = domain.map {
+                        it.toEntity("AC")
+                    }
+                    repository.questionInsertListFromDB(entities)
+
+
+                    //Actualizar la version
+                    val entity = AppParameterEntity("questions","",downloadResponse.version,null)
+
+                    repository.parameterInsertFormDB(entity)
+                } else {
+
+                    return 1 //No es necesario actualizar
+                }
+            }
+        } else {
+
+
+            return 2
+        }
+
+
+        return 0
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/card_status.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/card_status.xml b/app/src/main/res/layout/card_status.xml
new file mode 100644
--- /dev/null	(date 1695303403000)
+++ b/app/src/main/res/layout/card_status.xml	(date 1695303403000)
@@ -0,0 +1,36 @@
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    app:cardCornerRadius="10dp"
+    app:cardElevation="8dp"
+    app:cardMaxElevation="5dp"
+    android:layout_margin="10dp"
+    >
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:id="@+id/tvText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_margin="6dp"
+            android:text="Instalacion"
+            android:textSize="19sp"
+            android:textStyle="bold" />
+
+        <TextView
+            android:id="@+id/tvStatus"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_margin="6dp"
+            android:text="OK"
+            android:textSize="19sp"
+            android:textStyle="bold" />
+
+    </LinearLayout>
+
+</androidx.cardview.widget.CardView>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/AnswerDownloadSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/AnswerDownloadSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/AnswerDownloadSrv.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/AnswerDownloadSrv.kt	(date 1695760840000)
@@ -0,0 +1,69 @@
+package cl.daracenad.elearning.exercises.domain.service.download
+
+import cl.daracenad.elearning.exercises.data.DownloadTestAPI
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AnswerEntity
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.service.app.AppParameterFindSrv
+import cl.daracenad.elearning.exercises.domain.model.AppParameter
+import cl.daracenad.elearning.exercises.domain.model.test.Answer
+import cl.daracenad.elearning.exercises.domain.model.test.toDomain
+import cl.daracenad.elearning.exercises.domain.model.test.toEntity
+import javax.inject.Inject
+
+class AnswerDownloadSrv @Inject constructor(
+    private val repository: RepositoryDB,
+    private val downloadTestAPI: DownloadTestAPI,
+    private val appParameterFindSrv: AppParameterFindSrv,
+    )  {
+    suspend operator fun invoke(): Int {
+
+
+        val tokenParameter: AppParameter = appParameterFindSrv.invoke("token")
+        var versionParameter: AppParameter = appParameterFindSrv.invoke("answers")
+        var schoolIdParameter: AppParameter = appParameterFindSrv.invoke("schoolId")
+
+        val token = tokenParameter.valueString
+        val version = versionParameter.valueInteger
+        val schoolId = schoolIdParameter.valueString
+
+        var downloadResponse = downloadTestAPI.downloadAnswersFromAPI(
+            "Bearer ${token}",
+            schoolId,
+            version
+        )
+
+
+        if (downloadResponse != null) {
+            if (downloadResponse.success == 0) {
+                if (downloadResponse.download) {
+                    //insertar los datos.
+                    val tmp = downloadResponse.answers
+
+                    var domain: List<Answer> = tmp.map {
+                        it.toDomain()
+                    }
+                    var entities: List<AnswerEntity> = domain.map {
+                        it.toEntity()
+                    }
+
+                    repository.answerInsertListFromDB(entities)
+
+
+                    //Actualizar la version
+                    val entity = AppParameterEntity("answers","",downloadResponse.version,null)
+
+                    repository.parameterInsertFormDB(entity)
+                } else {
+
+                    return 1 //No es necesario actualizar
+                }
+            }
+        } else {
+            return 2
+        }
+
+
+        return 0
+    }
+}
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1692235445000)
+++ b/.idea/gradle.xml	(date 1692235445000)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="GRADLE" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="corretto-17" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/AppStatusAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/AppStatusAdapter.kt b/app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/AppStatusAdapter.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/ui/adapter/AppStatusAdapter.kt	(date 1695386366000)
@@ -0,0 +1,50 @@
+package cl.daracenad.elearning.exercises.ui.adapter
+
+
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import cl.daracenad.elearning.exercises.databinding.CardStatusBinding
+
+
+import cl.daracenad.elearning.exercises.domain.model.AppStatus
+
+
+class AppStatusAdapter: RecyclerView.Adapter<AppStatusAdapter.AppStatusViewHolder>()  {
+    var listAppStatus = emptyList<AppStatus>()
+
+    class AppStatusViewHolder(val binding: CardStatusBinding) : RecyclerView.ViewHolder(binding.root)
+
+    fun collection(newData: List<AppStatus>){
+        listAppStatus = newData
+        notifyDataSetChanged()
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AppStatusViewHolder {
+        return AppStatusAdapter.AppStatusViewHolder(
+            CardStatusBinding.inflate(
+                LayoutInflater.from(parent.context),
+                parent,
+                false
+            )
+        )
+    }
+
+    override fun getItemCount(): Int {
+        return listAppStatus.size
+    }
+
+    override fun onBindViewHolder(holder: AppStatusViewHolder, position: Int) {
+        holder.binding.tvText.text = listAppStatus[position].text.toString()
+        holder.binding.tvStatus.text = listAppStatus[position].text.toString()
+
+    }
+
+    fun insertStatus(entity: AppStatus){
+        listAppStatus = listAppStatus + entity
+        notifyDataSetChanged()
+
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITopicDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITopicDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITopicDAO.kt
new file mode 100644
--- /dev/null	(date 1693349811000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/ITopicDAO.kt	(date 1693349811000)
@@ -0,0 +1,32 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.TopicEntity
+import kotlinx.coroutines.flow.Flow
+
+
+@Dao
+interface ITopicDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: TopicEntity)
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<TopicEntity>)
+
+    @Update
+    suspend fun update(vararg entity: TopicEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: TopicEntity)
+
+    @Query("SELECT * FROM " + TopicEntity.TABLE_NAME)
+    fun all(): Flow<List<TopicEntity>>
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/QuestionSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/QuestionSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/QuestionSerialize.kt
new file mode 100644
--- /dev/null	(date 1693187130000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/QuestionSerialize.kt	(date 1693187130000)
@@ -0,0 +1,12 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class QuestionSerialize(
+    @SerializedName("questionId") val id:String,
+    @SerializedName("schoolId") val schoolId:String,
+    @SerializedName("courseId") val courseId:String,
+    @SerializedName("topicId") val topicId:String,
+    @SerializedName("testTemplateId") val testTemplateId:String,
+    @SerializedName("questionName") val name:String,
+    @SerializedName("questionDescription") val description:String)
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/StudentSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/StudentSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/StudentSerialize.kt
new file mode 100644
--- /dev/null	(date 1694366087000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/StudentSerialize.kt	(date 1694366087000)
@@ -0,0 +1,10 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class StudentSerialize (
+    @SerializedName("id") val id:String,
+    @SerializedName("name") val name:String,
+    @SerializedName("email") val email:String,
+    @SerializedName("matriculates") var matriculates: List<MatriculateSerialize>?
+)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/CourseDownloadSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/CourseDownloadSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/CourseDownloadSrv.kt
new file mode 100644
--- /dev/null	(date 1695760840000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/download/CourseDownloadSrv.kt	(date 1695760840000)
@@ -0,0 +1,70 @@
+package cl.daracenad.elearning.exercises.domain.service.download
+
+
+import cl.daracenad.elearning.exercises.data.DownloadTestAPI
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.data.database.entities.AppParameterEntity
+import cl.daracenad.elearning.exercises.domain.service.app.AppParameterFindSrv
+import cl.daracenad.elearning.exercises.domain.model.AppParameter
+import javax.inject.Inject
+
+class CourseDownloadSrv @Inject constructor(
+    private val repository: RepositoryDB,
+    private val downloadTestAPI: DownloadTestAPI,
+    private val appParameterFindSrv: AppParameterFindSrv
+) {
+    suspend operator fun invoke(): Int {
+
+
+        val tokenParameter: AppParameter = appParameterFindSrv.invoke("token")
+        var versionParameter: AppParameter = appParameterFindSrv.invoke("courses")
+        var schoolIdParameter: AppParameter = appParameterFindSrv.invoke("schoolId")
+
+        val token = tokenParameter.valueString
+        val version = versionParameter.valueInteger
+        val schoolId = schoolIdParameter.valueString
+
+        var downloadResponse = downloadTestAPI.downloadCoursesFromAPI(
+            "Bearer ${token}",
+            schoolId,
+            version
+        )
+
+
+        if (downloadResponse != null) {
+            if (downloadResponse.success == 0) {
+                if (downloadResponse.download) {
+                    //insertar los datos.
+                    /*
+                    val tmp = downloadResponse.courses
+
+                    var domain: List<Course> = tmp.map {
+                        it.toDomain()
+                    }
+
+                     */
+                    /* comentado por falla debe usarse
+                    var entities: List<CourseEntity> = domain.map {
+                        it.toEntity()
+                    }
+                    repository.courseInsertListFromDB(entities)
+*/
+
+                    //Actualizar la version
+                    val entity = AppParameterEntity("courses","",downloadResponse.version, null)
+
+                    repository.parameterInsertFormDB(entity)
+                } else {
+
+                    return 1 //No es necesario actualizar
+                }
+            }
+        } else {
+
+            return 2
+        }
+
+
+        return 0
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_profile.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_profile.xml b/app/src/main/res/layout/activity_profile.xml
new file mode 100644
--- /dev/null	(date 1695303329000)
+++ b/app/src/main/res/layout/activity_profile.xml	(date 1695303329000)
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".ui.ProfileActivity">
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="25dp"
+            android:layout_marginTop="30dp"
+            android:text="Actualizar Datos"
+            android:textSize="40sp"></TextView>
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/completa_el_formulario"
+            android:textSize="20sp"
+            android:layout_marginTop="25dp"
+            android:layout_marginLeft="8dp"
+            >
+        </TextView>
+
+        <EditText
+            android:id="@+id/etNombres"
+            android:layout_width="match_parent"
+            android:layout_height="50dp"
+            android:layout_marginLeft="25dp"
+            android:layout_marginTop="15dp"
+            android:layout_marginRight="25dp"
+            android:hint="@string/nombre_y_apellido"
+            android:inputType="textPersonName"
+            android:textSize="20sp"></EditText>
+        <EditText
+            android:id="@+id/etEMail"
+            android:layout_width="match_parent"
+            android:layout_height="50dp"
+            android:layout_marginTop="15dp"
+            android:layout_marginLeft="25dp"
+            android:layout_marginRight="25dp"
+            android:hint="@string/ingresa_tu_correo_electronico"
+            android:inputType="textEmailAddress"
+            android:textSize="20sp"></EditText>
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:layout_gravity="bottom"
+        android:gravity="center_horizontal">
+
+        <Button
+
+            android:id="@+id/btnActualizar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="25dp"
+            android:layout_marginRight="25dp"
+            android:onClick="btnActualizar"
+            android:text="@string/actualizar"></Button>
+
+        <TextView
+            android:id="@+id/tv_go_to_login"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="20dp"
+            android:layout_marginBottom="20dp"
+            android:text="@string/volver_al_login">
+
+        </TextView>
+        <TextView
+            android:id="@+id/tvMessage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:textSize="20sp"
+            android:layout_marginTop="25dp"
+            android:layout_marginLeft="8dp" />
+
+    </LinearLayout>
+
+</androidx.coordinatorlayout.widget.CoordinatorLayout>
\ No newline at end of file
Index: .idea/kotlinc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/kotlinc.xml b/.idea/kotlinc.xml
new file mode 100644
--- /dev/null	(date 1693181358000)
+++ b/.idea/kotlinc.xml	(date 1693181358000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="KotlinJpsPluginSettings">
+    <option name="version" value="1.8.0" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/AnswerSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/AnswerSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/AnswerSerialize.kt
new file mode 100644
--- /dev/null	(date 1693174683000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/AnswerSerialize.kt	(date 1693174683000)
@@ -0,0 +1,17 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+data class AnswerSerialize(
+    @SerializedName("schoolId") val schoolId:String,
+    @SerializedName("courseId") val courseId:String,
+    @SerializedName("topicId") val topicId:String,
+    @SerializedName("testTemplateId") val testTemplateId:String,
+    @SerializedName("questionId") val questionId:String,
+    @SerializedName("answerId") val answerId:String,
+    @SerializedName("answerName") val answerName:String,
+    @SerializedName("answerDescription") val answerDescription:String,
+    @SerializedName("answerIsOk") val answerIsOk:Boolean
+)
+
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/http/ConnectivityInterceptor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/ConnectivityInterceptor.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/ConnectivityInterceptor.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/http/ConnectivityInterceptor.kt	(date 1695386366000)
@@ -0,0 +1,20 @@
+package cl.daracenad.elearning.exercises.utils.http
+
+
+import okhttp3.Interceptor
+import okhttp3.Response
+import java.io.IOException
+
+class ConnectivityInterceptor : Interceptor {
+    override fun intercept(chain: Interceptor.Chain): Response {
+
+        if (!WifiService.instance.isOnline()) {
+
+            throw IOException("No internet connection")
+
+        } else {
+
+            return chain.proceed(chain.request())
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/utils/APIResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/utils/APIResult.kt b/app/src/main/java/cl/daracenad/elearning/exercises/utils/APIResult.kt
new file mode 100644
--- /dev/null	(date 1694511184000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/utils/APIResult.kt	(date 1694511184000)
@@ -0,0 +1,28 @@
+package cl.daracenad.elearning.exercises.utils
+
+enum class ApiStatus{
+    SUCCESS,
+    ERROR,
+    LOADING
+}  // for your case might be simplify to use only sealed class
+
+sealed class ApiResult <out T> (val status: ApiStatus, val data: T?, val message:String?) {
+
+    data class Success<out R>(val _data: R?): ApiResult<R>(
+        status = ApiStatus.SUCCESS,
+        data = _data,
+        message = null
+    )
+
+    data class Error(val exception: String): ApiResult<Nothing>(
+        status = ApiStatus.ERROR,
+        data = null,
+        message = exception
+    )
+
+    data class Loading<out R>(val _data: R?, val isLoading: Boolean): ApiResult<R>(
+        status = ApiStatus.LOADING,
+        data = _data,
+        message = null
+    )
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/EnrolledCoursePost.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/EnrolledCoursePost.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/EnrolledCoursePost.kt
new file mode 100644
--- /dev/null	(date 1694402848000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/school/EnrolledCoursePost.kt	(date 1694402848000)
@@ -0,0 +1,3 @@
+package cl.daracenad.elearning.exercises.data.network.model.school
+
+data class EnrolledCoursePost(val student:String, val id:List<String>)
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/AnswerResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/AnswerResponse.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/AnswerResponse.kt
new file mode 100644
--- /dev/null	(date 1694263538000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/test/AnswerResponse.kt	(date 1694263538000)
@@ -0,0 +1,16 @@
+package cl.daracenad.elearning.exercises.data.network.model.test
+
+import cl.daracenad.elearning.exercises.data.database.entities.AnswerEntity
+import cl.daracenad.elearning.exercises.data.network.model.serialize.AnswerSerialize
+import com.google.gson.annotations.SerializedName
+
+
+data class AnswerResponse(
+    @SerializedName("success") val success:Int,
+    @SerializedName("messages") val messages: List<String>,
+    @SerializedName("version") val version: Int,
+    @SerializedName("download") val download: Boolean,
+    @SerializedName("answers") val answers: List<AnswerSerialize>
+)
+
+
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/model/APIConst.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/APIConst.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/APIConst.kt
new file mode 100644
--- /dev/null	(date 1695735270000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/model/APIConst.kt	(date 1695735270000)
@@ -0,0 +1,15 @@
+package cl.daracenad.elearning.exercises.domain.model
+
+class APIConst{
+companion object {
+    const val VALIDATION_FAIL = 1
+    const val OK = 0
+    const val GO_REGISTER = -1
+    const val GO_LOGIN = -2
+    const val GO_MATRICULATE = -3
+    const val GO_PROFILE_ACTUALIZATE = -4
+    const val GO_GET_INFO_PROFILE = -5
+    const val GO_DOWNLOAD_COURSE = -6
+    const val CONNECTION_ERROR = 666
+}
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/StudentEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/StudentEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/StudentEntity.kt
new file mode 100644
--- /dev/null	(date 1694201456000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/StudentEntity.kt	(date 1694201456000)
@@ -0,0 +1,30 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.PrimaryKey
+import com.google.gson.annotations.SerializedName
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "students",
+    foreignKeys = [ForeignKey(
+        entity = SchoolEntity::class,
+        parentColumns = arrayOf("id"),
+        childColumns = arrayOf("schoolId")
+    )
+    ]
+)
+
+data class StudentEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull var id:String,
+    @ColumnInfo(name = "schoolId") @NotNull var schoolId:String,
+    @ColumnInfo("name") val name:String,
+    @ColumnInfo("email") val email:String
+
+){
+    companion object {
+        const val TABLE_NAME = "students"
+    }
+}
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/APIClient.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/APIClient.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/APIClient.kt
new file mode 100644
--- /dev/null	(date 1695386366000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/APIClient.kt	(date 1695386366000)
@@ -0,0 +1,151 @@
+package cl.daracenad.elearning.exercises.data.network
+
+//import cl.daracenad.elearning.exercises.core.RetrofitHelper
+
+import cl.daracenad.elearning.exercises.data.network.model.test.AnswerResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.CourseResponse
+import cl.daracenad.elearning.exercises.data.network.model.SchoolResponse
+import cl.daracenad.elearning.exercises.data.network.model.school.EnrolledCoursePost
+import cl.daracenad.elearning.exercises.data.network.model.sys.DonwloadTableResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.QuestionResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TestTemplateResponse
+import cl.daracenad.elearning.exercises.data.network.model.test.TopicResponse
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import retrofit2.Response
+import javax.inject.Inject
+
+class APIClient @Inject constructor(private val api: IAPIClient) {
+
+    suspend fun downloadTable(token: String): DonwloadTableResponse? {
+        return withContext(Dispatchers.IO) {
+            val response: Response<DonwloadTableResponse> = api.downloadTable(token)
+            response.body()!!
+        }
+    }
+
+    suspend fun downloadTableAnswers(
+        token: String,
+        schoolId: String,
+        version: Int
+    ): AnswerResponse? {
+        return withContext(Dispatchers.IO) {
+            val response: Response<AnswerResponse> = api.downloadAnswers(token, schoolId, version)
+            response.body()!!
+        }
+    }
+
+    suspend fun downloadTableCurses(
+        token: String,
+        schoolId: String,
+        version: Int
+    ): CourseResponse? {
+        return withContext(Dispatchers.IO) {
+            val response: Response<CourseResponse> = api.downloadCourses(token, schoolId, version)
+
+            response.body()!!
+        }
+    }
+
+    suspend fun downloadTableTestTemplates(
+        token: String,
+        schoolId: String,
+        version: Int
+    ): TestTemplateResponse? {
+        return withContext(Dispatchers.IO) {
+            val response: Response<TestTemplateResponse> =
+                api.downloadTestTemplates(token, schoolId, version)
+            response.body()!!
+        }
+    }
+
+    suspend fun downloadTableTopics(token: String, schoolId: String, version: Int): TopicResponse? {
+        return withContext(Dispatchers.IO) {
+            val response: Response<TopicResponse> = api.downloadTopics(token, schoolId, version)
+            response.body()!!
+        }
+    }
+
+    suspend fun downloadTableQuestions(
+        token: String,
+        schoolId: String,
+        version: Int
+    ): QuestionResponse? {
+        return withContext(Dispatchers.IO) {
+            val response: Response<QuestionResponse> =
+                api.downloadQuestions(token, schoolId, version)
+            response.body()!!
+        }
+    }
+
+    suspend fun profileUpdate(token: String, name: String): ReturnResponse? {
+        return withContext(Dispatchers.IO) {
+
+            val response: Response<ReturnResponse> = api.userProfileUpdate(token, name)
+            response.body()!!
+        }
+    }
+    /*
+
+        //Api ocupadas
+        suspend fun register(
+            name: String,
+            email: String,
+            password: String,
+            password_confirmation: String
+        ): Response<SchoolResponse>? {
+            return withContext(Dispatchers.IO) {
+                api.postRequest(
+                    name,
+                    email,
+                    password,
+                    password_confirmation
+                )
+            }
+        }
+
+        suspend fun coursesToEnroll(
+            token: String,
+            studentId: String,
+            ids: List<String>
+        ): Response<SchoolResponse>? {
+            return withContext(Dispatchers.IO) {
+
+                api.coursesToEnroll(token, EnrolledCoursePost(studentId, ids))
+            }
+        }
+
+        suspend fun profileGET(token: String, studentId: String): Response<SchoolResponse>? {
+            return withContext(Dispatchers.IO) {
+                var response:Response<SchoolResponse>? = null
+                try {
+                    response = api.userProfileGET(token, studentId)
+                    if (response.isSuccessful && response.body() != null) {
+
+                    } else if (response.body() != null) {
+
+                    } else {
+
+                    }
+                }catch(e:Exception){
+
+                }
+                response
+            }
+        }
+
+        suspend fun loginFromAPI(
+            email: String,
+            password: String
+        ): Response<SchoolResponse>? {
+            return withContext(Dispatchers.IO) {
+                api.postLogin(
+                    email,
+                    password
+                )
+            }
+        }
+
+     */
+
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_app_check.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_app_check.xml b/app/src/main/res/layout/activity_app_check.xml
new file mode 100644
--- /dev/null	(date 1695307250000)
+++ b/app/src/main/res/layout/activity_app_check.xml	(date 1695307250000)
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:onClick="btnInsert"
+    tools:context=".ui.sys.AppCheckActivity">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <Button
+            android:id="@+id/btnMatricularse"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:onClick="btnDelete"
+            android:text="Delete" />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:orientation="vertical">
+
+            <androidx.recyclerview.widget.RecyclerView
+                android:id="@+id/rvAppStatus"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                tools:listitem="@layout/card_status" />
+
+        </LinearLayout>
+
+
+    </LinearLayout>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/DownloadTableEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/DownloadTableEntity.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/DownloadTableEntity.kt
new file mode 100644
--- /dev/null	(date 1694264411000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/entities/DownloadTableEntity.kt	(date 1694264411000)
@@ -0,0 +1,34 @@
+package cl.daracenad.elearning.exercises.data.database.entities
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.PrimaryKey
+import cl.daracenad.elearning.exercises.data.network.model.serialize.DownloadTableSerialize
+import org.jetbrains.annotations.NotNull
+
+@Entity(
+    tableName = "download_tables",
+    foreignKeys = [
+        ForeignKey(
+            entity = SchoolEntity::class,
+            parentColumns = arrayOf("id"),
+            childColumns = arrayOf("schoolId")
+        )
+    ]
+)
+data class DownloadTableEntity(
+    @PrimaryKey @ColumnInfo(name = "id") @NotNull val id:Int,
+    @ColumnInfo(name = "schoolId") @NotNull val schoolId:String,
+    @ColumnInfo(name = "tablename") @NotNull val tableName:String,
+    @ColumnInfo(name = "version") @NotNull val version:String,
+    @ColumnInfo(name = "status") @NotNull val status:String
+    )
+{
+    companion object {
+        const val TABLE_NAME = "download_tables"
+    }
+
+
+}
+fun DownloadTableSerialize.toEntity() = DownloadTableEntity(id, schoolId,tableName,version,status)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/UserSerialize.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/UserSerialize.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/UserSerialize.kt
new file mode 100644
--- /dev/null	(date 1693089766000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/network/model/serialize/UserSerialize.kt	(date 1693089766000)
@@ -0,0 +1,10 @@
+package cl.daracenad.elearning.exercises.data.network.model.serialize
+
+import com.google.gson.annotations.SerializedName
+
+
+data class UserSerialize(
+    @SerializedName("id") val id:Int,
+    @SerializedName("name") val name:String,
+    @SerializedName("email") val email:String
+)
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppParameterFindSrv.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppParameterFindSrv.kt b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppParameterFindSrv.kt
new file mode 100644
--- /dev/null	(date 1695760839000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/domain/service/app/AppParameterFindSrv.kt	(date 1695760839000)
@@ -0,0 +1,21 @@
+package cl.daracenad.elearning.exercises.domain.service.app
+
+import cl.daracenad.elearning.exercises.data.RepositoryDB
+import cl.daracenad.elearning.exercises.domain.model.AppParameter
+import cl.daracenad.elearning.exercises.domain.model.toModel
+import javax.inject.Inject
+
+class AppParameterFindSrv @Inject constructor(private val repository: RepositoryDB) {
+    suspend operator fun invoke(key:String): AppParameter {
+        val parameter = repository.parameterFindKeyFromDB(key)
+        if(parameter != null){
+            return parameter.let { it.toModel(true) }
+        }
+        else{
+            return AppParameter(key,false,"",0, null)
+        }
+    }
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IEnrolledCourseDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IEnrolledCourseDAO.kt b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IEnrolledCourseDAO.kt
new file mode 100644
--- /dev/null	(date 1695734726000)
+++ b/app/src/main/java/cl/daracenad/elearning/exercises/data/database/dao/IEnrolledCourseDAO.kt	(date 1695734726000)
@@ -0,0 +1,33 @@
+package cl.daracenad.elearning.exercises.data.database.dao
+
+import android.database.sqlite.SQLiteException
+import androidx.lifecycle.LiveData
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import cl.daracenad.elearning.exercises.data.database.entities.EnrolledCourseEntity
+
+
+@Dao
+interface IEnrolledCourseDAO {
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insert(entity: EnrolledCourseEntity):Long
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Throws(SQLiteException::class)
+    suspend fun insertAll(entity: List<EnrolledCourseEntity>)
+
+    @Update
+    suspend fun update(vararg entity: EnrolledCourseEntity)
+
+    @Delete
+    suspend fun delete(vararg entity: EnrolledCourseEntity)
+
+    @Query("select * from ${EnrolledCourseEntity.TABLE_NAME}" )
+    fun all(): List<EnrolledCourseEntity>
+
+}
\ No newline at end of file
